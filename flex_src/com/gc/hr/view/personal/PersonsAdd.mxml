<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"
                preinitialize="onPreinitialize()" creationComplete="onCreationComplete()">
  <mx:VBox id="vbox" width="100%" height="100%">
    <mx:AdvancedDataGrid id="adg" width="100%" height="100%" horizontalScrollPolicy="auto"
                         editable="true" sortableColumns="false" dataProvider="{persons}"
                         itemRenderer="mx.controls.Label" lockedColumnCount="3"
                         labelFunction="{CommonUtil.gridLabelFunction}"
                         keyDown="CommonUtil.gridKeyDown(event)" itemEditEnd="onItemEditEnd(event)">
      <mx:groupedColumns>
        <mx:AdvancedDataGridColumn dataField="{Constants.PROP_NAME_SERIAL}" width="64"
                                   labelFunction="{CommonUtil.serialLabelFunction}"
                                   styleFunction="{CommonUtil.serialStyleFunction}" editable="false"/>
        <mx:AdvancedDataGridColumn dataField="name" editable="false"/>
        <mx:AdvancedDataGridColumn dataField="workerId" editable="false"/>
        <mx:AdvancedDataGridColumnGroup headerRenderer="{header}"
                                        headerText="{resourceManager.getString('gcc_hr', 'person.manage.update.info.page1')}"
                                        textAlign="left" editable="false">
          <mx:AdvancedDataGridColumn dataField="pid"/>
          <mx:AdvancedDataGridColumn dataField="sex" itemEditor="{comboBox}"/>
          <mx:AdvancedDataGridColumn dataField="people" itemEditor="{comboBox}"/>
          <mx:AdvancedDataGridColumn dataField="nativePlace" itemEditor="{comboBox}"/>
          <mx:AdvancedDataGridColumn dataField="regAddress"/>
          <mx:AdvancedDataGridColumn dataField="birthday" editorDataField="selectedDate"
                                     itemEditor="{dateField}"/>
          <mx:AdvancedDataGridColumn dataField="marryStatus" itemEditor="{comboBox}"/>
          <mx:AdvancedDataGridColumn dataField="annuities"/>
          <mx:AdvancedDataGridColumn dataField="accumulation"/>
          <mx:AdvancedDataGridColumn dataField="chkGroup" dataTipField="chkGroup.name"
                                     editorDataField="selectedItem" itemEditor="{comboBox}"/>
          <mx:AdvancedDataGridColumn dataField="onDate" editorDataField="selectedDate"
                                     itemEditor="{dateField}"/>
        </mx:AdvancedDataGridColumnGroup>
        <mx:AdvancedDataGridColumnGroup headerRenderer="{header}"
                                        headerText="{resourceManager.getString('gcc_hr', 'person.manage.update.info.page4')}"
                                        textAlign="left" editable="false">
          <mx:AdvancedDataGridColumn dataField="fillTableDate" editorDataField="selectedDate"
                                     itemEditor="{dateField}"/>
          <mx:AdvancedDataGridColumn dataField="commend"/>
          <mx:AdvancedDataGridColumn dataField="workDate" editorDataField="selectedDate"
                                     itemEditor="{dateField}"/>
          <mx:AdvancedDataGridColumn dataField="retireDate" editorDataField="selectedDate"
                                     itemEditor="{dateField}"/>
          <mx:AdvancedDataGridColumn dataField="serviceLength"/>
          <mx:AdvancedDataGridColumn dataField="inDate" editorDataField="selectedDate"
                                     itemEditor="{dateField}"/>
          <mx:AdvancedDataGridColumn dataField="outDate" editorDataField="selectedDate"
                                     itemEditor="{dateField}"/>
          <mx:AdvancedDataGridColumn dataField="workLength"/>
          <mx:AdvancedDataGridColumn dataField="groupNo"/>
          <mx:AdvancedDataGridColumn dataField="contractNo"/>
          <mx:AdvancedDataGridColumn dataField="contr1From" editorDataField="selectedDate"
                                     itemEditor="{dateField}"/>
          <mx:AdvancedDataGridColumn dataField="contr1End" editorDataField="selectedDate"
                                     itemEditor="{dateField}"/>
          <mx:AdvancedDataGridColumn dataField="contractReason"/>
          <mx:AdvancedDataGridColumn dataField="contr2From" editorDataField="selectedDate"
                                     itemEditor="{dateField}"/>
          <mx:AdvancedDataGridColumn dataField="contr2End" editorDataField="selectedDate"
                                     itemEditor="{dateField}"/>
          <mx:AdvancedDataGridColumn dataField="workType"/>
          <mx:AdvancedDataGridColumn dataField="level" itemEditor="{numberInput}"
                                     formatter="{Constants.NUMBER_FORMATTER_N0}"/>
          <mx:AdvancedDataGridColumn dataField="techLevel"/>
          <mx:AdvancedDataGridColumn dataField="responsibility" itemEditor="{textArea}"/>
          <mx:AdvancedDataGridColumn dataField="cert1No"/>
          <mx:AdvancedDataGridColumn dataField="cert1NoDate" editorDataField="selectedDate"
                                     itemEditor="{dateField}"/>
          <mx:AdvancedDataGridColumn dataField="cert2No"/>
          <mx:AdvancedDataGridColumn dataField="cert2NoHex"/>
          <mx:AdvancedDataGridColumn dataField="serviceNo"/>
          <mx:AdvancedDataGridColumn dataField="serviceNoDate" editorDataField="selectedDate"
                                     itemEditor="{dateField}"/>
        </mx:AdvancedDataGridColumnGroup>
        <mx:AdvancedDataGridColumnGroup headerRenderer="{header}"
                                        headerText="{resourceManager.getString('gcc_hr', 'person.manage.update.info.page5')}"
                                        textAlign="left" editable="false">
          <mx:AdvancedDataGridColumn dataField="frontWorkResume" itemEditor="{textArea}"/>
          <mx:AdvancedDataGridColumn dataField="frontTrainingResume" itemEditor="{textArea}"/>
          <mx:AdvancedDataGridColumn dataField="specification" itemEditor="{comboBox}"/>
          <mx:AdvancedDataGridColumn dataField="degree" itemEditor="{comboBox}"/>
          <mx:AdvancedDataGridColumn dataField="graduate" itemEditor="{comboBox}"/>
          <mx:AdvancedDataGridColumn dataField="skill" itemEditor="{textArea}"/>
          <mx:AdvancedDataGridColumn dataField="lanCom" itemEditor="{textArea}"/>
          <mx:AdvancedDataGridColumn dataField="national"/>
          <mx:AdvancedDataGridColumn dataField="state"/>
          <mx:AdvancedDataGridColumn dataField="city"/>
          <mx:AdvancedDataGridColumn dataField="address"/>
          <mx:AdvancedDataGridColumn dataField="zip" itemEditor="{numberInput}"/>
          <mx:AdvancedDataGridColumn dataField="telephone"/>
          <mx:AdvancedDataGridColumn dataField="email"/>
          <mx:AdvancedDataGridColumn dataField="officeTel"/>
          <mx:AdvancedDataGridColumn dataField="officeExt"/>
          <mx:AdvancedDataGridColumn dataField="officeFax"/>
          <mx:AdvancedDataGridColumn dataField="comment" itemEditor="{textArea}"/>
        </mx:AdvancedDataGridColumnGroup>
        <mx:AdvancedDataGridColumnGroup headerRenderer="{header}"
                                        headerText="{resourceManager.getString('gcc_hr', 'person.manage.update.info.page2')}"
                                        textAlign="left" editable="false">
          <mx:AdvancedDataGridColumn dataField="depart" dataTipField="depart.name"
                                     editorDataField="selectedItem" itemEditor="{departComboBox}"/>
          <mx:AdvancedDataGridColumn dataField="office" itemEditor="{officeComboBox}"/>
          <mx:AdvancedDataGridColumn dataField="line" dataTipField="line.name"
                                     editorDataField="selectedItem" itemEditor="{lineComboBox}"/>
          <mx:AdvancedDataGridColumn dataField="bus" dataTipField="bus.authNo"
                                     editorDataField="selectedItem" itemEditor="{busComboBox}"/>
        </mx:AdvancedDataGridColumnGroup>
        <mx:AdvancedDataGridColumnGroup headerRenderer="{header}"
                                        headerText="{resourceManager.getString('gcc_hr', 'person.manage.update.info.page3')}"
                                        textAlign="left" editable="false">
          <mx:AdvancedDataGridColumn dataField="type" itemEditor="{comboBox}"/>
          <mx:AdvancedDataGridColumn dataField="fkPosition" dataTipField="fkPosition.name"
                                     editorDataField="selectedItem" itemEditor="{comboBox}"/>
          <mx:AdvancedDataGridColumn dataField="regBelong" itemEditor="{comboBox}"/>
          <mx:AdvancedDataGridColumn dataField="party" itemEditor="{comboBox}"/>
          <mx:AdvancedDataGridColumn dataField="grade" itemEditor="{comboBox}"/>
          <mx:AdvancedDataGridColumn dataField="schooling" itemEditor="{comboBox}"/>
        </mx:AdvancedDataGridColumnGroup>
        <mx:AdvancedDataGridColumn width="0"/>
      </mx:groupedColumns>
    </mx:AdvancedDataGrid>
    <mx:HBox horizontalAlign="center" width="100%" paddingTop="10" paddingBottom="10">
      <mx:Button label="{resourceManager.getString('gcc', 'add')}" click="add(event)"/>
      <mx:Button label="{resourceManager.getString('gcc', 'delete')}" click="_delete(event)"/>
      <mx:Button label="{resourceManager.getString('gcc', 'save')}" click="save(event)"/>
      <mx:Button label="{resourceManager.getString('gcc', 'cancel')}" click="close(event)"/>
    </mx:HBox>
  </mx:VBox>
  <mx:Script>
    <![CDATA[
      import mx.collections.ArrayCollection;
      import mx.collections.IList;
      import mx.controls.Alert;
      import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
      import mx.controls.advancedDataGridClasses.AdvancedDataGridListData;
      import mx.controls.ComboBox;
      import mx.controls.DateField;
      import mx.controls.Label;
      import mx.controls.listClasses.ListItemRenderer;
      import mx.controls.TextArea;
      import mx.controls.TextInput;
      import mx.events.AdvancedDataGridEventReason;
      import mx.events.AdvancedDataGridEvent;
      import mx.events.FlexEvent;
      import mx.events.ListEvent;
      import mx.validators.Validator;
      import mx.rpc.events.ResultEvent;
      import mx.utils.ObjectUtil;

      import com.gc.Constants;
      import com.gc.CommonEvent;
      import com.gc.common.controller.BaseController;
      import com.gc.common.controller.UserController;
      import com.gc.common.model.Department;
      import com.gc.common.model.Person;
      import com.gc.common.model.SecurityUser;
      import com.gc.controls.AdvancedClassFactory;
      import com.gc.controls.AutoCompleteComboBox;
      import com.gc.controls.advancedDataGridClasses.SuperDataGridHeaderRenderer;
      import com.gc.controls.PopUpTextArea;
      import com.gc.hr.controller.CheckController;
      import com.gc.hr.controller.PersonalController;
      import com.gc.util.CommonUtil;

      [Bindable]
      private var persons:ArrayCollection=new ArrayCollection();
      [Bindable]
      private var departComboBox:AdvancedClassFactory;
      [Bindable]
      private var officeComboBox:AdvancedClassFactory;
      [Bindable]
      private var lineComboBox:AdvancedClassFactory;
      [Bindable]
      private var busComboBox:AdvancedClassFactory;
      [Bindable]
      private var comboBox:AdvancedClassFactory;
      [Bindable]
      private var dateField:AdvancedClassFactory;
      [Bindable]
      private var numberInput:AdvancedClassFactory;
      [Bindable]
      private var textArea:AdvancedClassFactory;
      [Bindable]
      private var header:AdvancedClassFactory;
      private var departList:ArrayCollection;
      private var lists:Object;
      private var fields:Array;

      private function init():void
      {
        lists={sex: Constants.GENDERS,
            people: PersonalController.peopleList, 
            nativePlace: PersonalController.nativePlaceList,
            marryStatus: PersonalController.marryStatusList, 
            specification: PersonalController.jobSpecList, 
            degree: PersonalController.schDegreeList, 
            graduate: PersonalController.schGraduateList,
            type: PersonalController.hireTypeList, 
            fkPosition: PersonalController.positionList, 
            regBelong: PersonalController.regBranchList,
            party: PersonalController.polPartyList, 
            grade: PersonalController.jobGradeList, 
            schooling: PersonalController.schoolingList,
            chkGroup: CheckController.groupList};
        BaseController.getDepartmentsAndOLEs(UserController.branchId, UserController.hrDepartId, onGetDepartListSuccess);
      }

      private function onPreinitialize():void
      {
        if (UserController.HR_WRITE)
          fields=["name", "workerId", "pid", "sex", "people", "nativePlace", "regAddress", "birthday", "marryStatus", "annuities", "accumulation", "chkGroup", "onDate", "downDate", "downReason",
            "upgradeDate", "upgradeReason", "type", "regBelong", "party", "grade", "schooling",
            "allotDate", "allotReason", "depart", "office", "line", "bus", "fkPosition",
            "fillTableDate", "commend", "workDate", "retireDate", "serviceLength", "inDate", "outDate", "workLength", "groupNo", "contractNo", "contr1From", "contr1End", "contractReason", "contr2From", "contr2End", "workType", "level", "techLevel", "responsibility", "cert1No", "cert1NoDate", "cert2No", "cert2NoHex", "serviceNo", "serviceNoDate",
            "frontWorkResume", "frontTrainingResume", "specification", "degree", "graduate", "skill", "lanCom", "national", "state", "city", "address", "zip", "telephone", "email", "officeTel", "officeExt", "officeFax", "comment"];
        else
          fields=[];
        init();

        departComboBox=new AdvancedClassFactory(ComboBox);
        officeComboBox=new AdvancedClassFactory(ComboBox);
        officeComboBox.properties={itemRenderer: new ClassFactory(Label)};
        officeComboBox.listeners=[{type: FlexEvent.CREATION_COMPLETE, listener: onOfficeCreateComplete}
          , {type: KeyboardEvent.KEY_UP, listener: CommonUtil.keyUp}];
        lineComboBox=new AdvancedClassFactory(AutoCompleteComboBox);
        lineComboBox.properties={editable: true};
        lineComboBox.listeners=[{type: FlexEvent.CREATION_COMPLETE, listener: onLineCreateComplete}];
        busComboBox=new AdvancedClassFactory(AutoCompleteComboBox);
        busComboBox.properties={editable: true};
        busComboBox.listeners=[{type: FlexEvent.CREATION_COMPLETE, listener: onBusCreateComplete}];
        comboBox=new AdvancedClassFactory(ComboBox);
        comboBox.properties={itemRenderer: new ClassFactory(Label), editable: true};
        comboBox.listeners=[{type: FlexEvent.CREATION_COMPLETE, listener: onComboBoxCreateComplete}];
        dateField=new AdvancedClassFactory(DateField);
        dateField.properties={formatString: Constants.DATE_FORMAT, showToday: true, yearNavigationEnabled: true, editable: true};
        numberInput=new AdvancedClassFactory(TextInput);
        numberInput.properties={restrict: "0-9"};
        textArea=new AdvancedClassFactory(PopUpTextArea);
        header=new AdvancedClassFactory(SuperDataGridHeaderRenderer);
      }

      private function onCreationComplete():void
      {
        CommonUtil.setDataGridColumns(adg, "gcc", "person", function(obj:Object):void
          {
            if (obj is AdvancedDataGridColumn)
            {
              var column:AdvancedDataGridColumn=obj as AdvancedDataGridColumn;
              column.editable=(fields.indexOf(column.dataField) >= 0);
            }
          });
        this.setFocus();
        adg.width=vbox.width=width-viewMetricsAndPadding.left-viewMetricsAndPadding.right;
      }

      private function onGetDepartListSuccess(e:ResultEvent):void
      {
        departList=e.result as ArrayCollection;
        departComboBox.properties={dataProvider: departList, itemRenderer: new ClassFactory(Label)};
        departComboBox.listeners=[{type: ListEvent.CHANGE, listener: onDepartChange}];
      }

      private function onDepartChange(event:Event):void
      {
        if (event.currentTarget is ComboBox)
        {
          var cbox:ComboBox=event.currentTarget as ComboBox;
          if (cbox.data is Person)
          {
            var p:Person=cbox.data as Person;
            p.office=null;
          }
        }
      }

      private function onItemEditEnd(event:AdvancedDataGridEvent):void
      {
        if (event.itemRenderer && event.reason != AdvancedDataGridEventReason.CANCELLED)
        {
          var adg:AdvancedDataGrid=event.currentTarget as AdvancedDataGrid;
          var column:AdvancedDataGridColumn=adg.columns[event.columnIndex];
          var newData:Object=adg.itemEditorInstance[column.editorDataField];
          var property:String=column.dataField;
          var data:Object=event.itemRenderer.data;
          // var clazz:Class=CommonUtil.getClass(data, property);
          try
          {
            data[property]=newData;
          }
          catch (error:Error)
          {
            event.reason = AdvancedDataGridEventReason.CANCELLED;
          }
        }
        // trace(event);
      }

      private function setDataProvider(obj:Object, property:String, selectedField:String, filter:Function=null):void
      {
        if (obj is ComboBox)
        {
          var cbox:ComboBox=obj as ComboBox;
          if (cbox.data != null)
          {
            var data:Object=CommonUtil.getAccessorValue(cbox.data, property);
            if (data is IList)
            {
              var list:IList=data as IList;
              cbox.dataProvider=(filter == null) ? list : list.toArray().filter(filter);
              cbox.selectedIndex=CommonUtil.indexOfKey(list.toArray(), cbox.data[selectedField], "label");
            }
          }
        }
      }

      private function onOfficeCreateComplete(event:Event):void
      {
        setDataProvider(event.currentTarget, "depart.offices", "office");
      }

      private function onLineCreateComplete(event:Event):void
      {
        setDataProvider(event.currentTarget, "depart.lines", "line");
      }

      private function onBusCreateComplete(event:Event):void
      {
        var person:Person=adg.selectedItem as Person;
        var onDate:Date=(person == null) ? null : person.onDate;
        setDataProvider(event.currentTarget, "depart.equipments", "bus", function(item:Object, idx:uint, arr:Array):Boolean
          {
            return (item.downDate == null || (onDate != null && item.downDate > onDate));
          });
      }

      private function onComboBoxCreateComplete(event:Event):void
      {
        if (event.currentTarget is ComboBox)
        {
          var cbox:ComboBox=event.currentTarget as ComboBox;
          if (cbox.listData is AdvancedDataGridListData && cbox.data is Person)
          {
            var listData:AdvancedDataGridListData=cbox.listData as AdvancedDataGridListData;
            var dataField:String=listData.dataField
            var list:Object=lists.hasOwnProperty(dataField) ? lists[dataField] : null;
            var p:Person=cbox.data as Person;
            cbox.dataProvider=list;
            cbox.selectedIndex=(list != null) ? CommonUtil.indexOfKey(list, p[dataField], "label") : -1;
          }
        }
      }

      private function close(event:Event=null):void
      {
        dispatchEvent(CommonEvent.CLOSE_EVENT);
      }

      private function add(event:Event):void
      {
        var person:Person=new Person(persons.length+1);
        person.branch=UserController.branch
        person.lastModifier=UserController.person;
        person.downDate=Constants.MAX_DATE;
        persons.addItem(person);
        adg.selectedItem=person;
        adg.editedItemPosition={rowIndex: adg.selectedIndex, columnIndex: 1};
      }

      private function _delete(event:Event):void
      {
        if (adg.selectedItem != null)
        {
          var k:int=persons.getItemIndex(adg.selectedItem);
          if (k >= 0)
          {
            persons.removeItemAt(k);
            callLater(function():void{adg.selectedIndex=(k < persons.length) ? k : persons.length - 1;});
          }
        }
      }

      private function save(event:Event):void
      {
        if (CommonUtil.validateGrid(adg, ["name", "workerId", {field:"pid", validator:Constants.VALIDATOR_IDCARD}, "onDate", "downDate", "type", "depart"], 
          function(item:Object):void
          {
            if (item is Person) {
              var p:Person=item as Person;
              p.allotDate=p.onDate;
              p.upgradeDate=p.onDate;
            }
          }).length > 0)
          return;
        PersonalController.addPersons(persons.toArray(), function(e:ResultEvent):void
          {
            var count:int=e.result as int;
            Alert.show(resourceManager.getString("gcc_hr", "person.add.success", [count]), 
              Constants.APP_NAME, Alert.OK, null, null, Constants.ICON32_INFO);
            close();
          // owner.dispatchEvent(CommonEvent.REFRESH_EVENT);
          });
      }
    ]]>
  </mx:Script>
</mx:TitleWindow>

<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:gc="com.gc.controls.*"
                preinitialize="onPreinitialize()" creationComplete="onCreationComplete()">
  <mx:VBox width="100%" height="100%" horizontalScrollPolicy="off" horizontalAlign="center"
           verticalGap="0">
    <mx:AdvancedDataGrid id="adg1" width="100%" height="100%" horizontalScrollPolicy="auto"
                         keyDown="{CommonUtil.gridKeyDown(event)}"
                         itemEditBegin="onItemEditBegin(event)" itemEditEnd="onItemEditEnd(event)"
                         scroll="onScroll(event)" resizableColumns="false">
      <mx:columns>
        <mx:AdvancedDataGridColumn dataField="{Constants.PROP_NAME_SERIAL}" width="64"
                                   labelFunction="{CommonUtil.serialLabelFunction}"
                                   styleFunction="{CommonUtil.serialStyleFunction}"/>
        <mx:AdvancedDataGridColumn dataField="person" dataTipField="person.workerId"
                                   editorDataField="selectedItem" itemEditor="{personComboBox}"/>
        <mx:AdvancedDataGridColumn dataField="person" dataTipField="person.name"/>
      </mx:columns>
    </mx:AdvancedDataGrid>
    <gc:StyledDataGrid id="adg2" width="100%" height="24" showHeaders="false" editable="false"
                       horizontalScrollPolicy="auto" verticalScrollPolicy="off"
                       resizableColumns="false">
      <gc:columns>
        <mx:AdvancedDataGridColumn dataField="{Constants.PROP_NAME_SERIAL}" width="64"
                                   styleFunction="{CommonUtil.serialStyleFunction}"/>
        <mx:AdvancedDataGridColumn dataField="person" dataTipField="person.workerId"/>
        <mx:AdvancedDataGridColumn dataField="person" dataTipField="person.name"/>
      </gc:columns>
    </gc:StyledDataGrid>
    <mx:HBox horizontalAlign="center" width="100%" paddingTop="10" paddingBottom="10">
      <mx:Button id="b1" label="{resourceManager.getString('gcc', 'insert')}" click="insert(event)"/>
      <mx:Button id="b2" label="{resourceManager.getString('gcc', 'append')}" click="append(event)"/>
      <mx:Button id="b3" label="{resourceManager.getString('gcc', 'delete')}" click="_delete(event)"/>
      <mx:Button id="b4" label="{resourceManager.getString('gcc', 'clear')}" click="clear(event)"/>
      <mx:Button id="b5" label="{resourceManager.getString('gcc', 'export')}" click="export(event)"/>
      <mx:Button id="b6" label="{resourceManager.getString('gcc', 'save')}" click="save(event)"/>
      <mx:Button id="b7" label="{resourceManager.getString('gcc', 'close')}" click="close(event)"/>
    </mx:HBox>
  </mx:VBox>
  <mx:Script>
    <![CDATA[
      import bee.eval.ast.CallExpression;
      import bee.eval.ast.IdentExpression;
      import bee.eval.Ident;
      import flash.events.MouseEvent;

      import mx.collections.ArrayCollection;
      import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
      import mx.controls.advancedDataGridClasses.AdvancedDataGridColumnGroup;
      import mx.controls.advancedDataGridClasses.AdvancedDataGridHeaderRenderer;
      import mx.controls.advancedDataGridClasses.AdvancedDataGridListData;
      import mx.controls.Alert;
      import mx.controls.ComboBox;
      import mx.controls.Label;
      import mx.events.AdvancedDataGridEvent;
      import mx.events.AdvancedDataGridEventReason;
      import mx.events.CloseEvent;
      import mx.events.FlexEvent;
      import mx.events.ListEvent;
      import mx.rpc.events.ResultEvent;
      import mx.utils.ObjectUtil;
      import mx.validators.Validator;
      import mx.validators.ValidationResult;

      import com.gc.common.controller.BaseController;
      import com.gc.common.controller.UserController;
      import com.gc.common.model.Person;
      import com.gc.controls.AdvancedClassFactory;
      import com.gc.controls.AutoCompleteComboBox;
      import com.gc.CommonEvent;
      import com.gc.Constants;
      import com.gc.ObjectEx;
      import com.gc.hr.Events;
      import com.gc.hr.controller.PersonalController;
      import com.gc.hr.controller.SalaryController;
      import com.gc.hr.model.SalDeptPsn;
      import com.gc.hr.model.SalFact;
      import com.gc.hr.model.SalFactD;
      import com.gc.hr.model.SalFixOnline;
      import com.gc.hr.model.SalItem;
      import com.gc.util.CommonUtil;
      import com.gc.util.DateUtil;
      import com.gc.validators.ValidatorEx;

      [Bindable]
      private var personComboBox:AdvancedClassFactory;
      private var persons:ArrayCollection; // 本部门的发薪人员
      private var items:ArrayCollection; // 所有发薪凭证明细中的项目(SalFactD.item)合集
      private var head:SalFact; // 当前add/edit的SalFact(fetched: depart,issuer)
      private var _data:ArrayCollection; // OP_EDIT: 发薪凭证明细, {items:items, head:head, data:[{person:p1, sfds:[sfd11, ..., sfd1n], sfos:[sfo11, ..., sfo1n]}, ..., {person:pn, sfds:[sfdn1, ..., sfdnn], sfos:[sfon1, ..., sfonn]}]}
      private var head_old:SalFact;
      private var op:String;
      private var list0:ArrayCollection; // 3维
      private var list1:ArrayCollection; // 3维
      private var list0$:ArrayCollection; // 2维
      private var list1$:ArrayCollection; // 2维
      private var list2:ArrayCollection;
      private var map_no:Object=new Object();
      private var map_id:Object=new Object();
      private var rr:Object;
      private var pmap:Object=new Object();

      private function onPreinitialize():void
      {
        list0=new ArrayCollection();
        list1=new ArrayCollection();
        list0$=new ArrayCollection();
        list1$=new ArrayCollection();
        list2=new ArrayCollection();
        addEventListener(CommonEvent.CREATED, onCreated);
        addEventListener(CommonEvent.RETURN, onReturn);
      }

      private function onCreationComplete():void
      {
        var fields:Array=["person.workerId"];
        adg2.lockedColumnCount=adg1.lockedColumnCount=3;
        adg2.draggableColumns=adg1.draggableColumns=false;
        adg2.sortableColumns=adg1.sortableColumns=false;
        adg2.visible=adg1.visible=false;
        adg2.labelFunction=adg1.labelFunction=CommonUtil.gridLabelFunction;
        adg2.styleFunction=adg1.styleFunction=salStyle;
        CommonUtil.setDataGridColumns(adg1, "gcc_hr", "salFact", function(obj:Object):void
          {
            if (obj is AdvancedDataGridColumn)
            {
              obj.editable=fields.indexOf(obj.dataTipField) >= 0;
            }
          });
        CommonUtil.setDataGridColumns(adg2, "gcc_hr", "salFact");
      }

      private function onCreated(e:CommonEvent):void
      {
        var writable:Boolean=UserController.hrSalWrite;
        var error:String=e.args.length > 7 ? e.args[7] : null;
        persons=e.args[0] as ArrayCollection;
        items=e.args[1] as ArrayCollection;
        head=e.args[2] as SalFact;
        op=head.no ? (writable ? Constants.OP_EDIT : Constants.OP_VIEW) : Constants.OP_ADD;
        _data=e.args[3] as ArrayCollection;
        head_old=e.args[4] as SalFact;
        if (e.args.length > 5 && e.args[5] == Constants.OP_VIEW)
        {
          op=Constants.OP_VIEW;
          writable=false;
        }
        rr=e.args.length > 6 ? e.args[6] : SalItem.validate(items, [SalItem.EVALF_ITEMS]);
        adg1.editable=writable && !error ? "true" : "false";
        b1.enabled=b2.enabled=b3.enabled=writable && !error;
        b4.enabled=b6.enabled=writable;
        var f:String=resourceManager.getString("gcc", "date.format.ym");

        if (op == Constants.OP_ADD)
        {
          title=resourceManager.getString("gcc_hr", "salFact.add2", [head.departName, DateUtil.formatDate(head.issueDate, f)]);
        }
        else if (op == Constants.OP_EDIT)
        {
          title=resourceManager.getString("gcc_hr", "salFact.edit", [head.departName, head.no]);
        }
        else if (op == Constants.OP_VIEW)
        {
          title=resourceManager.getString("gcc_hr", "salFact.view", [head.departName, head.no]);
        }
        for each (var p:Person in persons)
        {
          pmap[p.id]=p;
        }
        for each (var si:SalItem in items)
        {
          map_no[si.no]=si;
          map_id[si.id]=si;
        }
        callLater(function():void
          {
            adg1.columns=adg1.columns.concat(getColumns());
            adg2.columns=adg2.columns.concat(getColumns());
            if (op == Constants.OP_ADD) addFact();
            else loadFact();
            if (op != Constants.OP_VIEW) xxItems(rr.dep, rr.sylla.xx, rr.sylla.xxq);
          });
      }

      // inputs: {map:map_no, count:6, ids:{xx001:Ident(xx001), ...}, sis:{GZ:["xx001", ...], ...}}
      private function xxItems(dep:Object, xx:Object, xxq:Array):void
      {
        var n1:String, n2:String, si:SalItem;
        var inputs:Object={map:map_no, count:0, ids:{}, sis:{}};
        for (n1 in dep) // n1:GZ
        {
          for each (n2 in xxq) // n2:xx001, use xxq to add xx to si in it's appear order in formula
          {
            if (dep[n1][n2] && xx[n2])
            {
              si=map_no[n1];
              inputs.ids[n2]=dep[n1][n2];
              if (!inputs.sis[n1])
                inputs.sis[n1]=new ArrayCollection();
              if (!(inputs.sis[n1].contains(n2)))
                inputs.sis[n1].addItem(n2);
              inputs.count++;
            }
          }
        }
        if (inputs.count > 0)
          CommonUtil.popupWindow(FactItems, "", this, inputs);
        else
          onReturn();
      }

      private function onPersonBoxCreateComplete(e:Event):void
      {
        if (e.currentTarget is ComboBox)
        {
          var cbox:ComboBox=e.currentTarget as ComboBox;
          if (cbox.listData is AdvancedDataGridListData)
          {
            var d:Object=cbox.data;
            cbox.selectedIndex=Person.indexOfAll(d.person);
          }
        }
      }

      private function getColumns():Array
      {
        var r:Array=[];
        var cc:AdvancedDataGridColumn;
        var si:SalItem;
        for each (si in items)
        {
          cc=new AdvancedDataGridColumn();
          cc.headerText=si.no+"["+si.name+"]";
          cc.dataField=String(si.id);
          cc.setStyle("textAlign", "right");
          cc.showDataTips=true;
          cc.editable=(si.formula == null || si.formula == "");
          r.push(cc);
        }
        cc=new AdvancedDataGridColumn();
        cc.width=1;
        cc.editable=false;
        r.push(cc);
        return r;
      }

      private function salStyle(data:Object,column:AdvancedDataGridColumn):Object
      {
        return data.sfom && data.sfom[column.dataField] ? {color:Constants.Maroon} : 
          map_id[column.dataField] && map_id[column.dataField].formula ? {color:Constants.Blue} :
          {color: Constants.Black};
      }

      private function onItemEditBegin(e:AdvancedDataGridEvent):void
      {
        var columnIndex:int=e.columnIndex;
        if (columnIndex < 3)
          return;
        var rowIndex:int=e.rowIndex;
        var column:AdvancedDataGridColumn=adg1.columns[columnIndex];
        var data:Object=list1$.getItemAt(rowIndex);
        var error:String=null;
        if (data.sfom[column.dataField])
        {
          error=resourceManager.getString("gcc_hr", "salFactD.error.amount.fix");
        }
        if (error)
        {
          e.reason=AdvancedDataGridEventReason.CANCELLED;
          callLater(function():void{CommonUtil.showError(adg1.itemEditorInstance, 2000, error);});
        }
      }

      private function onScroll(event:Event):void
      {
        // callLater(function():void{adg2.horizontalScrollPosition=adg1.horizontalScrollPosition;});
      }

      private function onItemEditEnd(e:AdvancedDataGridEvent):void
      {
        if (e.itemRenderer && e.reason != AdvancedDataGridEventReason.CANCELLED)
        {
          var columnIndex:int=e.columnIndex;
          if (columnIndex < 3)
            return;
          var rowIndex:int=e.rowIndex;
          var column:AdvancedDataGridColumn=adg1.columns[columnIndex];
          var data:Object=e.itemRenderer.data;
          var n0:Number=Number(data[column.dataField]);
          var n1:Number=Number(adg1.itemEditorInstance[column.editorDataField]);
          var error:String=null;
          if (isNaN(n1))
          {
            error=resourceManager.getString("gcc_hr", "salFactD.error.amount.nan");
          }
          if (error)
          {
            e.reason=AdvancedDataGridEventReason.CANCELLED;
            CommonUtil.showError(adg1.itemEditorInstance, 2000, error);
          }
          else if (data.sfom[column.dataField])
          {
            e.reason=AdvancedDataGridEventReason.CANCELLED;
          }
          else if (n1 != n0)
          {
            data[column.dataField]=n1;
            callLater(function():void{calculate();calculate2();});
          }
        }
      }

      private function onReturn(e:CommonEvent=null):void
      {
        if (e) // returned from FactItems popup window
        {
          if (e.data) // press OK
          {
            var xx:String;
            for (xx in e.data)
            {
              rr.sylla.xx[xx]=e.data[xx]; // rr.sylla.xx: {xx001:500, xx002:600, ...}
            }
            calculate();
            calculate2();
          }
          else // press Cancel
          {
            _close();
            return;
          }
        }
        personComboBox=new AdvancedClassFactory(AutoCompleteComboBox);
        personComboBox.properties={dataProvider:Person.ALL, itemRenderer:new ClassFactory(Label), labelField:"workerId"};
        personComboBox.listeners=[{type: FlexEvent.CREATION_COMPLETE, listener: onPersonBoxCreateComplete}];
      }

      private function calculate():void
      {
        var obj:Object, n:String, r:Object, tt:Object={}, cc:Object={};
        var si:SalItem;
        var f1:Function=function(ids:Object):void
          {
            var n:String, call:CallExpression, ide:IdentExpression, id1:Ident, id2:Ident, args:Object;
            for (n in ids)
            {
              id1=ids[n];
              if (id1.isF && SalItem.xxFunc(id1.id))
              {
                for each (call in id1.calls)
                {
                  args={"#params":[]};
                  for each (ide in call.args)
                  {
                    id2=ide.id;
                    if (id2 && id2.isV)
                    {
                      if (rr.sylla.xx[id2.id])
                      {
                        args["#amount"]=rr.sylla.xx[id2.id];
                        id2.value=args;
                        cc[id2.id]=args;
                      }
                      else
                      {
                        args["#params"].push(id2.id);
                        args["#total#"+id2.id]=tt[id2.id];
                      }
                    }
                  }
                }
              }
            }
          };
        var f2:Function=function(obj:Object):void
          {
            var n:String;
            for (n in rr.sylla.xx)
            {
              if (cc[n]) cc[n]["#obj"]=obj;
            }
          };
        for each (obj in list1$)
        {
          for each (si in items)
          {
            if (!si.formula && !rr.dep[si.no])
            {
              if (!tt[si.no])
                tt[si.no]=0;
              tt[si.no]+=obj[si.id];
            }
          }
        }
        for (n in rr.dep)
        {
          f1(rr.dep[n]);
        }
        for each (obj in list1$)
        {
          for each (si in items)
          {
            if (!si.formula && !rr.dep[si.no])
              cc[si.no]=obj[si.id];
          }
          f2(obj);
          r=SalItem.evaluate(rr, cc);
          obj.error=r.valid ? null : r.error;
          for (n in r.value)
          {
            if (map_no[n] && map_no[n].formula)
            {
              obj[map_no[n].id]=r.value[n];
            }
          }
        }
        list1$.refresh();
      }

      private function calculate2():void
      {
        var obj:Object, si:SalItem, total:Object=new Object();
        total[Constants.PROP_NAME_SERIAL]=resourceManager.getString("gcc", "total");
        for each (obj in list1$)
        {
          for each (si in items)
          {
            if (!total[si.id])
              total[si.id]=0;
            total[si.id]+=obj[si.id];
          }
        }
        list2.removeAll();
        list2.addItem(total);
        list2.refresh();
      }

      private function load(callback:Function=null):void
      {
        // _data:[{person:p1, sfds:[sfd11, ..., sfd1n], sfos:[sfo11, ..., sfo1n]}, ..., {person:pn, sfds:[sfdn1, ..., sfdnn], sfos:[sfon1, ..., sfonn]}]
        var d:Object, obj:Object, m:ObjectEx;
        var sfd:SalFactD, sfo:SalFixOnline;
        list0.removeAll();
        list0$.removeAll();
        list1$.removeAll();
        for each (d in _data)
        {
          obj=new Object();
          obj.branch=head.branch;
          obj.person=d.person;
          obj.hd=head;
          obj.uid="p#"+d.person.id+"_sfds";
          m=new ObjectEx();
          for each (sfo in d.sfos)
          {
            if (!sfo.item.formula)
              m[sfo.itemId]=sfo.amount;
          }
          for each (sfd in d.sfds)
          {
            obj[sfd.itemId]=m[sfd.itemId] ? m[sfd.itemId] : sfd.amount;
            if (callback is Function)
              callback(sfd);
          }
          obj.sfom=m;
          // obj.sfos=d.sfos;
          // obj.sfds=d.sfds;
          list1$.addItem(obj);
        }
        adg1.dataProvider=list1$;
        adg1.visible=true;
        list2.removeAll();
        adg2.dataProvider=list2;
        adg2.visible=true;
        calculate2();
      }

      private function addFact():void
      {
        load();
      }
      private function loadFact():void
      {
        load(function(sfd:SalFactD):void{list0.addItem(sfd);});
        list0$=ObjectUtil.copy(list1$) as ArrayCollection;
      }

      private function unpack():ArrayCollection
      {
        var list:ArrayCollection=new ArrayCollection();
        var i:int, obj:Object;
        var si:SalItem;
        var sfd:SalFactD;
        for (i=0; i < list1$.length; i++)
        {
          obj=list1$.getItemAt(i);
          for each (si in items)
          {
            sfd=new SalFactD();
            sfd.id.fact=head;
            sfd.id.item=si;
            sfd.person=obj.person;
            sfd.amount=isNaN(obj[si.id]) ? 0 : obj[si.id];
            sfd.id.no=i+1;
            list.addItem(sfd);
          }
        }
        return list;
      }

      private function add(i:int):void
      {
        var obj:Object=new Object();
        obj.branch=head.branch;
        obj.hd=head;
        for each (var si:SalItem in items)
        {
          obj[si.id]=0;
        }
        obj.sfom={};
        if (i >= 0 && i < list1$.length)
          list1$.addItemAt(obj, i);
        else
          list1$.addItem(obj);
        adg1.selectedItem=obj;
        adg1.editedItemPosition={rowIndex: adg1.selectedIndex, columnIndex: 1};
      }

      private function insert(e:Event):void
      {
        if (adg1.selectedItem == null)
        {
          Alert.show(resourceManager.getString("gcc", "insert.not.null"), Constants.APP_NAME, Alert.OK, 
            null, null, Constants.ICON32_WARNING);
          return;
        }
        add(adg1.selectedIndex);
      }

      private function append(e:Event):void
      {
        add(list1$.length);
      }

      private function _delete(e:Event):void
      {
        var obj:Object=adg1.selectedItem;
        if (obj == null)
        {
          Alert.show(resourceManager.getString("gcc", "delete.not.null"), Constants.APP_NAME, Alert.OK, 
            null, null, Constants.ICON32_WARNING);
        }
        else
        {
          var k:int=list1$.getItemIndex(obj);
          if (k >= 0)
          {
            list1$.removeItemAt(k);
            adg1.selectedIndex=(k == list1$.length) ? list1$.length - 1 : k;
            calculate();
            calculate2();
          }
        }
      }

      private function clear(e:Event):void
      {
        if (list1$.length > 0)
        {
          Alert.show(resourceManager.getString("gcc", "clear.confirm"), Constants.APP_NAME, Alert.YES | Alert.NO,
            null, function(e:CloseEvent):void
            {
              if (e.detail == Alert.YES)
              {
                list1$.removeAll();
                calculate2();
              }
            }, Constants.ICON32_QUESTION);
        }
      }

      private function export(e:Event):void
      {
        var headers:Object=CommonUtil.getGridHeaders(adg1);
        var data:Array=CommonUtil.getGridData(adg1);
        CommonUtil.export(data, headers);
      }

      private function get changed():Boolean
      {
        return ObjectUtil.compare(head, head_old, 1) != 0
          || ObjectUtil.compare(list0$, list1$, 1) != 0;
      }

      private function save(e:Event, list:ArrayCollection=null):void
      {
        list1=list ? list : unpack();
        if (!changed)
        {
          Alert.show(resourceManager.getString("gcc", "save.no.change"), Constants.APP_NAME,
            Alert.OK, null, null, Constants.ICON32_WARNING);
          return;
        }
        var p:Person, obj:Object, m1:Object={}, m2:Object={};
        for each (obj in list1$)
        {
          p=obj.person ? obj.person : null;
          if (p)
          {
            if (!m1[p.id])
              m1[p.id]=p;
            if (!m2[p.workerId])
              m2[p.workerId]=p;
          }
        }
        var pf:Function=function(value:Object, source:Object, property:String, subFields:Array):ValidationResult
          {
            var p:Person=source && source.person ? source.person : null;
            var e:Object=source && source.error ? source.error : null;
            var n:String, s:String;
            if (p)
            {
              if (p != m1[p.id]) return new ValidationResult(true, null, "salFact.error.duplicated.id", resourceManager.getString("gcc_hr", "salFact.error.duplicated.id", [p.workerId, p.name]));
              else if (p != m2[p.workerId]) return new ValidationResult(true, null, "salFact.error.duplicated.workerId", resourceManager.getString("gcc_hr", "salFact.error.duplicated.workerId"));
              else if (p.onDate > head.date || head.date >= p.downDate) return new ValidationResult(true, null, "salFact.error.expired.person", resourceManager.getString("gcc_hr", "salFact.error.expired.person", 
                  [DateUtil.formatDate(head.date), p.workerId, p.name, DateUtil.formatDate(p.onDate), DateUtil.formatDate(p.downDate)]));
            }
            if (e)
            {
              s="";
              for (n in e) s+=n+": "+e[n]+"\n";
              return new ValidationResult(true, null, null, s.substring(0, s.length-2));
            }
            return null;
          };
        var pv:Validator=new ValidatorEx(pf);
        if (CommonUtil.validateGrid(adg1, [{field:"person.workerId", validator:pv}], null, 1, 5000).length > 0)
          return;
        var s:String="";
        for each (obj in list1$)
        {
          p=obj.person ? obj.person : null;
          if (p && !pmap[p.id])
          {
            s+=p.name+", ";
          }
        }
        var f:Function=function():void
          {
            SalaryController.saveFact(head_old, list0.source, head, list1.source,
              function(e1:ResultEvent):void
              {
                var sf:SalFact=e1.result as SalFact;
                var info:String;
                var type:String;
                if (sf == null) {
                  info=resourceManager.getString("gcc_hr", "salFact.del2.success", [head.departName, head.no]);
                  type=Events.DEL_SALFACT;
                } else if (op == Constants.OP_ADD) {
                  info=resourceManager.getString("gcc_hr", "salFact.add.success", [sf.departName, sf.no]);
                  type=Events.ADD_SALFACT;
                  CommonUtil.copyProperties(sf, head);
                } else if (op == Constants.OP_EDIT) {
                  info=resourceManager.getString("gcc_hr", "salFact.edit.success", [sf.departName, sf.no]);
                  type=Events.EDIT_SALFACT;
                  CommonUtil.copyProperties(sf, head);
                }
                Alert.show(info, Constants.APP_NAME, Alert.OK, null, function(e2:Event):void
                  {
                    _close();
                    owner.dispatchEvent(new Events(type, head));
                  }, Constants.ICON32_INFO);
              });
          };
        if (s.length > 0)
        {
          s=resourceManager.getString("gcc_hr", "salFact.query.other.persons", [s.substr(0, s.length-2)]);
          Alert.show(s, Constants.APP_NAME, Alert.YES | Alert.NO, null, function(e3:CloseEvent):void
            {
              if (e3.detail == Alert.YES) f();
            }, Constants.ICON32_QUESTION);
        }
        else
        {
          f();
        }
      }

      private function _close():void
      {
        dispatchEvent(CommonEvent.CLOSE_EVENT);
      }

      private function close(e:Event=null):void
      {
        if (changed)
        {
          Alert.show(resourceManager.getString("gcc", "save.change"), Constants.APP_NAME, Alert.YES | Alert.NO,
            null, function(e:CloseEvent):void
            {
              if (e.detail == Alert.YES)
                save(e, unpack());
              else
                _close();
            }, Constants.ICON32_QUESTION);
        }
        else
        {
          _close();
        }
      }
    ]]>
  </mx:Script>
</mx:TitleWindow>

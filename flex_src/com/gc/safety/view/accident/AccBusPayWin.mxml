<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" width="330" height="400"
                preinitialize="onPreinitialize()" creationComplete="onCreationComplete()"
                keyDown="CommonUtil.keyDown(event)">
  <mx:Form id="form" percentWidth="100">
    <mx:FormItem label="事故编号">
      <mx:TextInput id="tiAccNo" name="no" text="{accident.no}"/>
    </mx:FormItem>
    <mx:FormItem label="事故日期">
      <mx:DateField id="dfDate" name="date" text="{df.format(accident.date)}"
                    formatString="{Constants.DATE_FORMAT}"/>
    </mx:FormItem>
    <mx:FormItem label="事故车号">
      <mx:TextInput id="tiBus" name="bus.useId" text="{accident.bus.useId}"/>
    </mx:FormItem>
    <mx:FormItem label="车自损额">
      <mx:TextInput id="tiLost" name="lost" text="{accident.lost}" restrict="0-9."/>
    </mx:FormItem>
  </mx:Form>
  <mx:HBox id="addBT" horizontalAlign="center" width="100%">
    <mx:Button id="btSave" label="{resourceManager.getString('gcc','save')}" click="save(event)"/>
    <mx:Button id="btCancel" label="{resourceManager.getString('gcc','cancel')}"
               click="cancel(event)"/>
  </mx:HBox>
  <mx:HBox id="delBT" horizontalAlign="center" width="100%">
    <mx:Button id="btDelete" label="{resourceManager.getString('gcc','delete')}" click="del(event)"/>
    <mx:Button id="btCancel1" label="{resourceManager.getString('gcc','cancel')}"
               click="cancel(event)"/>
  </mx:HBox>
  <mx:HBox id="upBT" horizontalAlign="center" width="100%">
    <mx:Button id="btUpdate" label="{resourceManager.getString('gcc','update')}"
               click="update(event)"/>
    <mx:Button id="btCancel2" label="{resourceManager.getString('gcc','cancel')}"
               click="cancel(event)"/>
  </mx:HBox>
  <mx:DateFormatter id="df" formatString="{Constants.DATE_FORMAT}"/>
  <mx:Script>
    <![CDATA[
      import mx.collections.ArrayCollection;
      import mx.managers.PopUpManager;
      import com.gc.common.controller.UserController;
      import com.gc.safety.controller.AccidentController;
      import mx.utils.ObjectUtil;
      import mx.rpc.events.ResultEvent;
      import mx.events.CloseEvent;
      import com.gc.Constants;
      import mx.controls.Alert;
      import com.gc.safety.Events;
      import com.gc.util.CommonUtil;
      import com.gc.safety.model.Accident;

      [Bindable]
      private var accident:Accident;
      private var accNoItem:String;

      private function onPreinitialize():void
      {
      }

      private function onCreationComplete():void
      {
        CommonUtil.visit(this, setItem);
        //增加
        addEventListener(Events.ADD,getAddObject);
        //删除
        addEventListener(Events.DELETE, getDelObject);
        //更新
        addEventListener(Events.UPDATE, getUpObject);
      }

      private function setItem(comp:Object):void
      {
        if (comp is DateField)
        {
          var df:DateField=comp as DateField;
          df.width = tiAccNo.width;
        }
      }

      // 控制控件的可编辑及按钮的可用性，arr = [add,del,up],都是Boolean
      private function compManage(textEditable:Boolean,cbEnable:Boolean,arr:Array):void
      {
        CommonUtil.visit(form,function(comp:Object):void 
          {
            if(comp is TextInput)
            {
              var ti:TextInput = comp as TextInput;
              ti.editable = textEditable;
            } else if(comp is DateField)
            {
              var df:DateField = comp as DateField;
              df.enabled = cbEnable;
            }
          });
        addBT.visible = arr[0];
        addBT.includeInLayout = arr[0];
        delBT.visible = arr[1];
        delBT.includeInLayout = arr[1];
        upBT.visible = arr[2];
        upBT.includeInLayout = arr[2];
      }

      private function getAddObject(event:Events):void
      {
        compManage(true,true,[true,false,false]);
        dfDate.enabled = false;
        tiBus.editable = false;
        accident = event.data as Accident;
        accNoItem = ObjectUtil.copy(accident.no) as String;
        if (accident == null)
        {
          tiAccNo.setFocus();
          return;
        }
        tiLost.setFocus();
      }

      private function getDelObject(event:Events):void
      {
        compManage(false,false,[false,true,false]);
        accident = event.data as Accident;
        btDelete.setFocus();
      }

      private function getUpObject(event:Events):void
      {
        compManage(true,true,[false,false,true]);
        dfDate.enabled = false;
        tiBus.editable = false;
        accident = event.data as Accident;
        accNoItem = ObjectUtil.copy(accident.no) as String;
        btUpdate.setFocus();
      }

      private function save(event:Event):void
      {
        if (!CommonUtil.validateForm(form,["no","date","tiBus","tiLost"]))
          return;
        if (tiAccNo.text != accNoItem)
        {
          AccidentController.getAccidentByNo(UserController.branchId, tiAccNo.text,function(evt:ResultEvent):void 
            {
              var list:ArrayCollection = evt.result as ArrayCollection;
              if(list.length > 0)
              {
                accident = list[0] as Accident;
                accident.lost = Number(tiLost.text);
                AccidentController.saveCAccident(accident,function(evt:ResultEvent):void {
                    dispatchEvent(new Events(Events.SAVE_SUCCESS));
                  });
              } else {
                dispatchEvent(new Events(Events.REFRESH));
                Alert.show('您填写的事故编号和序号没有对应的未审核的对象',Constants.APP_NAME,Alert.OK,null,null,Constants.ICON32_WARNING);
              }
            });
        }
        else
        {
          accident.lost = Number(tiLost.text);
          AccidentController.saveCAccident(accident,function(evt:ResultEvent):void {
              dispatchEvent(new Events(Events.SAVE_SUCCESS));
            });
        }
      }

      private function del(event:Event):void
      {
        Alert.show('确定要删除吗',Constants.APP_NAME,Alert.YES | Alert.NO,null,function(evt:CloseEvent):void 
          {
            if(evt.detail == Alert.NO)
              return;
            accident.lost = 0;
            AccidentController.saveCAccident(accident, function(e:ResultEvent):void {
                dispatchEvent(new Events(Events.DEL_SUCCESS));
              })
          },Constants.ICON32_QUESTION);
      }

      private function update(event:Event):void
      {
        if (!CommonUtil.validateForm(form,["accident.no","dfDate","tiBus","tiLost"]))
          return;
        if (tiAccNo.text != accNoItem)
        {
          AccidentController.getAccidentByNo(UserController.branchId, tiAccNo.text,function(evt:ResultEvent):void 
            {
              var list:ArrayCollection = evt.result as ArrayCollection;
              if(list.length > 0)
              {
                accident = list[0] as Accident;
                accident.lost = Number(tiLost.text);
                AccidentController.saveCAccident(accident,function(evt:ResultEvent):void {
                    dispatchEvent(new Events(Events.UPDATE_SUCCESS));
                  });
              } else {
                dispatchEvent(new Events(Events.REFRESH));
                Alert.show('您填写的事故编号和序号没有对应的未审核的对象',Constants.APP_NAME,Alert.OK,null,null,Constants.ICON32_WARNING);
              }
            });
        }
        else
        {
          accident.lost = Number(tiLost.text);
          AccidentController.saveCAccident(accident,function(evt:ResultEvent):void {
              dispatchEvent(new Events(Events.UPDATE_SUCCESS));
            });
        }
      }

      private function cancel(event:Event):void
      {
        dispatchEvent(new Events(Events.REFRESH));
        PopUpManager.removePopUp(this);
      }
    ]]>
  </mx:Script>
</mx:TitleWindow>

<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
           preinitialize="onPreinitialize()" creationComplete="onCreationComplete()">
  <mx:VBox width="100%">
    <mx:AdvancedDataGrid id="adgOutPsn" width="100%" labelFunction="{CommonUtil.gridLabelFunction}"
                         rowCount="5" dataProvider="{outPsns}" editable="true"
                         keyDown="keyDownHandler(event)" sortableColumns="false"
                         itemRenderer="mx.controls.Label" horizontalScrollPolicy="auto"
                         itemEditEnd="onItemEditEnd(event)">
      <mx:columns>
        <mx:AdvancedDataGridColumn dataField="id" dataTipField="id.no" width="64" editable="false"
                                   labelFunction="setNo"/>
        <mx:AdvancedDataGridColumn dataField="name"/>
        <mx:AdvancedDataGridColumn dataField="sex" itemEditor="{comboBox}"/>
        <mx:AdvancedDataGridColumn dataField="age" itemEditor="{numberInput}"
                                   formatter="{Constants.NUMBER_FORMATTER_N0}"/>
        <mx:AdvancedDataGridColumn dataField="regAddress" itemEditor="{textArea}"/>
        <mx:AdvancedDataGridColumn dataField="address" itemEditor="{textArea}"/>
        <mx:AdvancedDataGridColumn dataField="tel"/>
        <mx:AdvancedDataGridColumn dataField="duty" dataTipField="duty.name" itemEditor="{comboBox}"
                                   editorDataField="selectedItem"/>
        <mx:AdvancedDataGridColumn dataField="maim" dataTipField="maim.label"
                                   itemEditor="{comboBox}" editorDataField="selectedItem"/>
        <mx:AdvancedDataGridColumn dataField="desc" itemEditor="{textArea}"/>
      </mx:columns>
    </mx:AdvancedDataGrid>
    <mx:HBox id="buttonBox" width="100%" horizontalAlign="center" paddingBottom="5">
      <mx:Button id="add" label="+" click="addItem(event)" width="55"/>
      <mx:Button id="del" label="-" click="delItem(event)" width="55"/>
      <mx:Button id="remove" label="{resourceManager.getString('gcc', 'clear')}"
                 click="removeAll(event)" width="55"/>
    </mx:HBox>
  </mx:VBox>
  <mx:Script>
    <![CDATA[
      import com.gc.controls.PopUpTextArea;
      import mx.rpc.events.ResultEvent;
      import mx.events.AdvancedDataGridEventReason;
      import mx.collections.IList;
      import mx.controls.Alert;
      import mx.controls.advancedDataGridClasses.AdvancedDataGridListData;
      import mx.controls.ComboBox;
      import mx.controls.TextInput;
      import mx.events.FlexEvent;
      import mx.controls.Label;
      import com.gc.common.controller.UserController;
      import com.gc.safety.controller.AccidentController;
      import com.gc.Constants;
      import com.gc.util.CommonUtil;
      import com.gc.controls.AdvancedClassFactory;
      import com.gc.safety.model.AccOutPsn;
      import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
      import mx.collections.ArrayCollection;
      import mx.events.AdvancedDataGridEvent;

      [Bindable]
      private var comboBox:AdvancedClassFactory;
      [Bindable]
      private var numberInput:AdvancedClassFactory;
      [Bindable]
      private var textArea:AdvancedClassFactory;
      private var branchId:int;
      private var lists:Object;
      [Bindable]
      public var outPsns:ArrayCollection = new ArrayCollection();
      private var outPsn:AccOutPsn;

      private function onPreinitialize():void
      {
        branchId = UserController.branchId;
        AccidentController.getAccDutys(branchId,successDutys);
        comboBox=new AdvancedClassFactory(ComboBox);
        comboBox.properties={itemRenderer: new ClassFactory(Label)};
        comboBox.listeners=[{type: FlexEvent.CREATION_COMPLETE, listener: onComboBoxCreateComplete}
          , {type: KeyboardEvent.KEY_UP, listener: CommonUtil.keyUp}];
        numberInput=new AdvancedClassFactory(TextInput);
        numberInput.properties={restrict: "0-9"};
        textArea=new AdvancedClassFactory(PopUpTextArea);
      }

      private function successDutys(event:ResultEvent):void
      {
        lists = {sex: Constants.GENDERS,
            duty: AccidentController.accDutyList,
            maim: Constants.MAIMS};
      }

      private function onCreationComplete():void
      {
        CommonUtil.setDataGridColumns(adgOutPsn, "gcc_safety", "accoutpsn", function(obj:Object):void{});
      }

      private function onComboBoxCreateComplete(event:Event):void
      {
        if (event.currentTarget is ComboBox)
        {
          var cbox:ComboBox=event.currentTarget as ComboBox;
          if (cbox.listData is AdvancedDataGridListData && cbox.data is AccOutPsn)
          {
            var listData:AdvancedDataGridListData=cbox.listData as AdvancedDataGridListData;
            var dataField:String=listData.dataField
            var list:Object=(lists.hasOwnProperty(dataField) && (lists[dataField] is IList || lists[dataField] is Array)) ? lists[dataField] : null;
            var p:AccOutPsn=cbox.data as AccOutPsn;
            cbox.dataProvider=list;
            cbox.selectedIndex=(list != null) ? CommonUtil.indexOfKey(list, p[dataField], "label") : -1;
          }
        }
      }

      private function serialStyleFunction(data:Object, column:AdvancedDataGridColumn):Object
      {
        column.setStyle("backgroundColor", 0xD8D8D8);
        return {color:0x0000FF, fontWeight:"bold", textAlign:"center"};
      }

      private function setNo(item:Object, column:AdvancedDataGridColumn):int
      {
        column.styleFunction = serialStyleFunction;
        var i:int = outPsns.getItemIndex(item) + 1;
        if (outPsn == null)
        {
          outPsn = new AccOutPsn();
        }
        outPsn.id.no = i;
        return i;
      }

      private function onItemEditEnd(event:AdvancedDataGridEvent):void
      {
        if (event.itemRenderer && event.reason != AdvancedDataGridEventReason.CANCELLED)
        {
          var adg:AdvancedDataGrid=event.currentTarget as AdvancedDataGrid;
          var column:AdvancedDataGridColumn=adg.columns[event.columnIndex];
          var newData:Object=adg.itemEditorInstance[column.editorDataField];
          var property:String=column.dataField;
          var data:Object=event.itemRenderer.data;
          try
          {
//	            data[property]=newData.hasOwnProperty(Constants.PROP_NAME_VALUE) ? newData[Constants.PROP_NAME_VALUE] : newData;
            if (newData == "" && CommonUtil.getAccessorValue(data, property) == null)
              event.reason=AdvancedDataGridEventReason.CANCELLED;
            else
              data[property]=newData;
            if (data[property] == "")
              data[property] = null;
          }
          catch (error:Error)
          {
            event.reason = AdvancedDataGridEventReason.CANCELLED;
          }
        }
        if (adgOutPsn.errorString != null)
        {
          adgOutPsn.errorString = null;
        }
      }

      private function addItem(event:Event):void
      {
        outPsn = new AccOutPsn();
        outPsn.id.branch = UserController.branch;
        outPsns.addItem(outPsn);
        adgOutPsn.selectedItem = outPsn;
        adgOutPsn.editedItemPosition = {rowIndex: adgOutPsn.selectedIndex, columnIndex:1};
      }

      private function delItem(event:Event):void
      {
        if (outPsns.length <= 0)
          return;
        if (adgOutPsn.selectedItem != null)
        {
          var k:int=outPsns.getItemIndex(adgOutPsn.selectedItem);
          if (k >= 0)
          {
            outPsns.removeItemAt(k);
            adgOutPsn.selectedIndex=(k == outPsns.length) ? outPsns.length - 1 : k;
          }
        }
        else
        {
          Alert.show(resourceManager.getString('gcc','delete.not.null'),Constants.APP_NAME,Alert.OK,null,null,Constants.ICON32_WARNING);
        }
      }

      private function removeAll(event:Event):void
      {
        if (outPsns != null)
        {
          if (outPsns.length > 0)
          {
            outPsns.removeAll();
          }
        }
      }
    ]]>
  </mx:Script>
</mx:Canvas>

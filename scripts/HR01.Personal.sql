--------------------------------------------------------------------------------
--人员状态变动表(新):T_PSN_STATUS
--人员业务调动表(新):T_PSN_ONLINE
--部门处室表(新):T_DEPARTTERM
--岗位表(重建):T_POSITION
--人员照片表(新):T_PSN_PHOTO
--人事基本代码表(新):T_PSN_DEGREE, T_PSN_GRADE, T_PSN_GRADUATE, T_PSN_MSTATE, T_PSN_NPLACE, T_PSN_PARTY, T_PSN_PEOPLE, T_PSN_REGBELONG, T_PSN_SCHOOLING, T_PSN_SPEC, T_PSN_TYPE
--日志表(新):T_EVENT_LOG, T_EVENT_LOGD
--原表修改:T_PERSONAL
--------------------------------------------------------------------------------
SET ECHO OFF
SET VERIFY OFF
SET HEADING OFF
--------------------------------------------------------------------------------
--人员状态变动表(新)
EXEC SP_DROPTABLE('T_PSN_STATUS');
CREATE TABLE T_PSN_STATUS
(
  C_BELONG          NUMBER(18)                      NULL,
  C_PERSON          NUMBER(18)                      NULL,
  C_UPGRADE_REASON  VARCHAR2(20 BYTE)               NULL,
  C_TYPE            VARCHAR2(10 BYTE)           NOT NULL,
  C_POSITION        VARCHAR2(1 BYTE)                NULL,
  C_REGBELONG       VARCHAR2(20 BYTE)               NULL,
  C_PARTY           VARCHAR2(12 BYTE)               NULL,
  C_GRADE           VARCHAR2(40 BYTE)               NULL,
  C_SCHOOLHISTORY   VARCHAR2(60 BYTE)               NULL,
  C_ONDATE          DATE                            NULL,
  C_DOWNDATE        DATE                        NOT NULL,
  C_UPGRADER        NUMBER(18)                  NOT NULL
) LOGGING NOCACHE NOPARALLEL MONITORING;
--关键字
ALTER TABLE T_PSN_STATUS ADD (CONSTRAINT PK_PSN_STATUS PRIMARY KEY (C_BELONG, C_PERSON, C_ONDATE));
--人员外键
ALTER TABLE T_PSN_STATUS ADD (ONSTRAINT FK_PSN_STATUS FOREIGN KEY (C_BELONG, C_PERSON) REFERENCES T_PERSONAL (C_BELONG,C_PERSONALID));
--按人员索引
CREATE INDEX IDX_PSN_STATUS ON T_PSN_STATUS (C_BELONG, C_PERSON) LOGGING NOPARALLEL;

--------------------------------------------------------------------------------
--人员业务调动表(新)
EXEC SP_DROPTABLE('T_PSN_ONLINE');
CREATE TABLE T_PSN_ONLINE
(
  C_BELONG       NUMBER(18)                         NULL,
  C_PERSON       NUMBER(18)                         NULL,
  C_ALLOTREASON  VARCHAR2(20 BYTE)                  NULL,
  C_DEPART       NUMBER(18)                     NOT NULL,
  C_OFFICE       VARCHAR2(40 BYTE)                  NULL,
  C_LINEID       NUMBER(18)                         NULL,
  C_BUSID        NUMBER(18)                         NULL,
  C_ONDATE       DATE                           NOT NULL,
  C_DOWNDATE     DATE                           NOT NULL,
  C_ALLOTER      VARCHAR2(30 BYTE)              NOT NULL
) LOGGING NOCACHE NOPARALLEL MONITORING;
--关键字
ALTER TABLE T_PSN_ONLINE ADD (CONSTRAINT PK_HRPSN_ONLINE PRIMARY KEY (C_BELONG, C_PERSON, C_ONDATE));
--人员外键
ALTER TABLE T_PSN_ONLINE ADD (CONSTRAINT FK_HRPSN_ONLINE FOREIGN KEY (C_BELONG, C_PERSON) REFERENCES T_PERSONAL (C_BELONG,C_PERSONALID));
--按人员索引
CREATE INDEX IDX_PSN_ONLINE ON T_PSN_ONLINE (C_BELONG, C_PERSON) LOGGING NOPARALLEL;

--------------------------------------------------------------------------------
--部门处室表(新)
EXEC SP_DROPTABLE('T_DEPARTTERM');
CREATE TABLE T_DEPARTTERM
(
  C_BELONG   NUMBER(18)                         NOT NULL,
  C_DEPART   NUMBER(18)                         NOT NULL,
  C_NAME     VARCHAR2(40 BYTE)                  NOT NULL,
  C_MANDUTY  VARCHAR2(400 BYTE)                     NULL,
  C_LEADER   NUMBER(18)                             NULL,
  C_COMMENT  VARCHAR2(255 BYTE)                     NULL
) LOGGING NOCACHE NOPARALLEL MONITORING;
--关键字
ALTER TABLE T_DEPARTTERM ADD (CONSTRAINT PK_DEPARTTERM PRIMARY KEY (C_BELONG, C_DEPART, C_NAME));
--部门外键
ALTER TABLE T_DEPARTTERM ADD (CONSTRAINT FK_DEPARTTERM FOREIGN KEY (C_BELONG, C_DEPART) REFERENCES T_DEPARTMENT (C_BELONG,C_DEPARTMENTID));
--按部门索引
CREATE INDEX IDX_DEPARTTERM_DEPT ON T_DEPARTTERM (C_BELONG, C_DEPART) LOGGING NOPARALLEL;

--------------------------------------------------------------------------------
--岗位表(重建)
EXEC SP_DROPTABLE('T_POSITION');
CREATE TABLE T_POSITION
(
  C_BELONG                NUMBER(18)            NOT NULL,
  C_NO                    VARCHAR2(1 BYTE)      NOT NULL,
  C_NAME                  VARCHAR2(40 BYTE)     NOT NULL,
  C_RESPONSIBILITY        VARCHAR2(400 BYTE)        NULL,
  C_REQ_DESCRIPTION       VARCHAR2(400 BYTE)        NULL,
  C_REQ_CERT              VARCHAR2(400 BYTE)        NULL,
  C_REQ_PSNCOUNT          NUMBER(18)                NULL,
  C_GEN_LEVEL             NUMBER(3)                 NULL,
  C_SALARY_LEVEL          NUMBER(3)                 NULL,
  C_TECH_LEVEL            NUMBER(3)                 NULL,
  C_SECURITY_LEVEL        NUMBER(3)                 NULL,
  C_TECH_DESCRIPTION      VARCHAR2(400 BYTE)        NULL,
  C_SECURITY_DESCRIPTION  VARCHAR2(400 BYTE)        NULL,
  C_COMMENT               VARCHAR2(255 BYTE)        NULL
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_POSITION ADD (CONSTRAINT PK_POSITION PRIMARY KEY (C_BELONG, C_NO));
--BRANCH外键
ALTER TABLE T_POSITION ADD (CONSTRAINT FK_POSITION FOREIGN KEY (C_BELONG) REFERENCES T_BRANCH (C_BRANCHID));
--按BRANCH索引
CREATE INDEX IDX_POSITION_BELONG ON T_POSITION (C_BELONG) LOGGING NOPARALLEL;
--唯一索引
CREATE UNIQUE INDEX IDX_POSITIONID ON T_POSITION (C_NO) LOGGING NOPARALLEL;

--------------------------------------------------------------------------------
--人员照片表(新)
EXEC SP_DROPTABLE('T_PSN_PHOTO');
CREATE TABLE T_PSN_PHOTO
(
  C_BELONG     NUMBER(18)                       NOT NULL,
  C_PERSONALID NUMBER(18)                       NOT NULL,
  C_PHOTO      BLOB                             NOT NULL,
  C_PHOTODATE  DATE                             DEFAULT SYSDATE               NOT NULL,
  C_UPLOADBY   NUMBER(18)
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_PSN_PHOTO ADD (CONSTRAINT PK_PSN_PHOTO PRIMARY KEY (C_BELONG, C_PERSONALID));
--人员外键
ALTER TABLE T_PSN_PHOTO ADD (CONSTRAINT FK_PSN_PHOTO FOREIGN KEY (C_BELONG, C_PERSONALID) REFERENCES T_PERSONAL (C_BELONG,C_PERSONALID));
--照片上传人外键
ALTER TABLE T_PSN_PHOTO ADD (CONSTRAINT FK_PSN_PHOTO_UPLOADER FOREIGN KEY (C_BELONG, C_UPLOADBY) REFERENCES T_PERSONAL (C_BELONG,C_PERSONALID));

--------------------------------------------------------------------------------
--人事基本代码表(新):
--T_PSN_DEGREE
EXEC SP_DROPTABLE('T_PSN_DEGREE');
CREATE TABLE T_PSN_DEGREE
(
  C_BELONG  NUMBER(18)					NOT NULL,
  C_NAME    VARCHAR2(60 BYTE)		NOT NULL,
  C_NO      NUMBER(18,2)				DEFAULT 0 NOT NULL,
  C_ACTIVE  NUMBER(1)						DEFAULT 1 NOT NULL
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_PSN_DEGREE ADD (CONSTRAINT PK_PSN_DEGREE PRIMARY KEY (C_BELONG, C_NAME));
--BRANCH外键
ALTER TABLE T_PSN_DEGREE ADD (CONSTRAINT FK_PSN_DEGREE FOREIGN KEY (C_BELONG) REFERENCES T_BRANCH (C_BRANCHID));
--按BRANCH索引
CREATE INDEX IDX_PSN_DEGREE ON T_PSN_DEGREE (C_BELONG) LOGGING NOPARALLEL;
--唯一索引
CREATE UNIQUE INDEX IDX_PSN_DEGREE_NO ON T_PSN_DEGREE (C_BELONG, C_NO) LOGGING NOPARALLEL;

--T_PSN_GRADE
EXEC SP_DROPTABLE('T_PSN_GRADE');
CREATE TABLE T_PSN_GRADE
(
  C_BELONG  NUMBER(18)          NOT NULL,
  C_NAME    VARCHAR2(40 BYTE)   NOT NULL,
  C_NO      NUMBER(18,2)        DEFAULT 0 NOT NULL,
  C_ACTIVE  NUMBER(1)           DEFAULT 1 NOT NULL
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_PSN_GRADE ADD (CONSTRAINT PK_PSN_GRADE PRIMARY KEY (C_BELONG, C_NAME));
--BRANCH外键
ALTER TABLE T_PSN_GRADE ADD (CONSTRAINT FK_PSN_GRADE FOREIGN KEY (C_BELONG) REFERENCES T_BRANCH (C_BRANCHID));
--按BRANCH索引
CREATE INDEX IDX_PSN_GRADE ON T_PSN_GRADE (C_BELONG) LOGGING NOPARALLEL;
--唯一索引
CREATE UNIQUE INDEX IDX_PSN_GRADE_NO ON T_PSN_GRADE (C_BELONG, C_NO) LOGGING NOPARALLEL;

--T_PSN_GRADUATE
EXEC SP_DROPTABLE('T_PSN_GRADUATE');
CREATE TABLE T_PSN_GRADUATE
(
  C_BELONG  NUMBER(18)					NOT NULL,
  C_NAME    VARCHAR2(20 BYTE)		NOT NULL,
  C_NO      NUMBER(18,1)				DEFAULT 0 NOT NULL,
  C_ACTIVE  NUMBER(1)						DEFAULT 1 NOT NULL
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_PSN_GRADUATE ADD (CONSTRAINT PK_PSN_GRADUATE PRIMARY KEY (C_BELONG, C_NAME));
--BRANCH外键
ALTER TABLE T_PSN_GRADUATE ADD (CONSTRAINT FK_PSN_GRADUATE FOREIGN KEY (C_BELONG) REFERENCES T_BRANCH (C_BRANCHID));
--按BRANCH索引
CREATE INDEX IDX_PSN_GRADUATE ON T_PSN_GRADUATE (C_BELONG) LOGGING NOPARALLEL;
--唯一索引
CREATE UNIQUE INDEX IDX_PSN_GRADUATE_NO ON T_PSN_GRADUATE (C_BELONG, C_NO) LOGGING NOPARALLEL;

--T_PSN_MSTATE
EXEC SP_DROPTABLE('T_PSN_MSTATE');
CREATE TABLE T_PSN_MSTATE
(
  C_BELONG  NUMBER(18)        NOT NULL,
  C_NAME    VARCHAR2(4 BYTE)  NOT NULL,
  C_NO      NUMBER(18,2)      DEFAULT 0 NOT NULL,
  C_ACTIVE  NUMBER(1)         DEFAULT 1 NOT NULL
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_PSN_MSTATE ADD (CONSTRAINT PK_PSN_MSTATE PRIMARY KEY (C_BELONG, C_NAME));
--BRANCH外键
ALTER TABLE T_PSN_MSTATE ADD (CONSTRAINT FK_PSN_MSTATE FOREIGN KEY (C_BELONG) REFERENCES T_BRANCH (C_BRANCHID));
--按BRANCH索引
CREATE INDEX IDX_PSN_MSTATE ON T_PSN_MSTATE (C_BELONG) LOGGING NOPARALLEL;
--唯一索引
CREATE UNIQUE INDEX IDX_PSN_MSTATE_NO ON T_PSN_MSTATE (C_BELONG, C_NO) LOGGING NOPARALLEL;

--T_PSN_NPLACE
EXEC SP_DROPTABLE('T_PSN_NPLACE');
CREATE TABLE T_PSN_NPLACE
(
  C_BELONG  NUMBER(18)          NOT NULL,
  C_NAME    VARCHAR2(20 BYTE)   NOT NULL,
  C_NO      NUMBER(18,2)        DEFAULT 0 NOT NULL,
  C_ACTIVE  NUMBER(1)           DEFAULT 1 NOT NULL
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_PSN_NPLACE ADD (CONSTRAINT PK_PSN_NPLACE PRIMARY KEY (C_BELONG, C_NAME));
--BRANCH外键
ALTER TABLE T_PSN_NPLACE ADD (CONSTRAINT FK_PSN_NPLACE FOREIGN KEY (C_BELONG) REFERENCES T_BRANCH (C_BRANCHID));
--按BRANCH索引
CREATE INDEX IDX_PSN_NPLACE ON T_PSN_NPLACE (C_BELONG) LOGGING NOPARALLEL;
--唯一索引
CREATE UNIQUE INDEX IDX_PSN_NPLACE_NO ON T_PSN_NPLACE (C_BELONG, C_NO) LOGGING NOPARALLEL;

--T_PSN_PARTY
EXEC SP_DROPTABLE('T_PSN_PARTY');
CREATE TABLE T_PSN_PARTY
(
  C_BELONG  NUMBER(18)          NOT NULL,
  C_NAME    VARCHAR2(12 BYTE)   NOT NULL,
  C_NO      NUMBER(18,2)        DEFAULT 0 NOT NULL,
  C_ACTIVE  NUMBER(1)           DEFAULT 1 NOT NULL
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_PSN_PARTY ADD (CONSTRAINT PK_PSN_PARTY PRIMARY KEY (C_BELONG, C_NAME));
--BRANCH外键
ALTER TABLE T_PSN_PARTY ADD (CONSTRAINT FK_PSN_PARTY FOREIGN KEY (C_BELONG) REFERENCES T_BRANCH (C_BRANCHID));
--按BRANCH索引
CREATE INDEX IDX_PSN_PARTY ON T_PSN_PARTY (C_BELONG) LOGGING NOPARALLEL;
--唯一索引
CREATE UNIQUE INDEX IDX_PSN_PARTY_NO ON T_PSN_PARTY (C_BELONG, C_NO) LOGGING NOPARALLEL;

--T_PSN_PEOPLE
EXEC SP_DROPTABLE('T_PSN_PEOPLE');
CREATE TABLE T_PSN_PEOPLE
(
  C_BELONG  NUMBER(18)          NOT NULL,
  C_NAME    VARCHAR2(20 BYTE)   NOT NULL,
  C_NO      NUMBER(18,2)        DEFAULT 0 NOT NULL,
  C_ACTIVE  NUMBER(1)           DEFAULT 1 NOT NULL
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_PSN_PEOPLE ADD (CONSTRAINT PK_PSN_PEOPLE PRIMARY KEY (C_BELONG, C_NAME));
--BRANCH外键
ALTER TABLE T_PSN_PEOPLE ADD (CONSTRAINT FK_PSN_PEOPLE FOREIGN KEY (C_BELONG) REFERENCES T_BRANCH (C_BRANCHID));
--按BRANCH索引
CREATE INDEX IDX_PSN_PEOPLE ON T_PSN_PEOPLE (C_BELONG) LOGGING NOPARALLEL;
--唯一索引
CREATE UNIQUE INDEX IDX_PSN_PEOPLE_NO ON T_PSN_PEOPLE (C_BELONG, C_NO) LOGGING NOPARALLEL;

--T_PSN_REGBELONG
EXEC SP_DROPTABLE('T_PSN_REGBELONG');
CREATE TABLE T_PSN_REGBELONG
(
  C_BELONG  NUMBER(18)          NOT NULL,
  C_NAME    VARCHAR2(20 BYTE)   NOT NULL,
  C_NO      NUMBER(18,2)        DEFAULT 0 NOT NULL,
  C_ACTIVE  NUMBER(1)           DEFAULT 1 NOT NULL
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_PSN_REGBELONG ADD (CONSTRAINT PK_PSN_REGBELONG PRIMARY KEY (C_BELONG, C_NAME));
--BRANCH外键
ALTER TABLE T_PSN_REGBELONG ADD (CONSTRAINT FK_PSN_REGBELONG FOREIGN KEY (C_BELONG) REFERENCES T_BRANCH (C_BRANCHID));
--按BRANCH索引
CREATE INDEX IDX_PSN_REGBELONG ON T_PSN_REGBELONG (C_BELONG) LOGGING NOPARALLEL;
--唯一索引
CREATE UNIQUE INDEX IDX_PSN_REGBELONG_NO ON T_PSN_REGBELONG (C_BELONG, C_NO) LOGGING NOPARALLEL;

--T_PSN_SCHOOLING
EXEC SP_DROPTABLE('T_PSN_SCHOOLING');
CREATE TABLE T_PSN_SCHOOLING
(
  C_BELONG  NUMBER(18)          NOT NULL,
  C_NAME    VARCHAR2(60 BYTE)   NOT NULL,
  C_NO      NUMBER(18,2)        DEFAULT 0 NOT NULL,
  C_ACTIVE  NUMBER(1)           DEFAULT 1 NOT NULL
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_PSN_SCHOOLING ADD (CONSTRAINT PK_PSN_SCHOOLING PRIMARY KEY (C_BELONG, C_NAME));
--BRANCH外键
ALTER TABLE T_PSN_SCHOOLING ADD (CONSTRAINT FK_PSN_SCHOOLING FOREIGN KEY (C_BELONG) REFERENCES T_BRANCH (C_BRANCHID));
--按BRANCH索引
CREATE INDEX IDX_PSN_SCHOOLING ON T_PSN_SCHOOLING (C_BELONG) LOGGING NOPARALLEL;
--唯一索引
CREATE UNIQUE INDEX IDX_PSN_SCHOOLING_NO ON T_PSN_SCHOOLING (C_BELONG, C_NO) LOGGING NOPARALLEL;

--T_PSN_SPEC
EXEC SP_DROPTABLE('T_PSN_SPEC');
CREATE TABLE T_PSN_SPEC
(
  C_BELONG  NUMBER(18)          NOT NULL,
  C_NAME    VARCHAR2(60 BYTE)   NOT NULL,
  C_NO      NUMBER(18,2)        DEFAULT 0 NOT NULL,
  C_ACTIVE  NUMBER(1)           DEFAULT 1 NOT NULL
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_PSN_SPEC ADD (CONSTRAINT PK_PSN_SPEC PRIMARY KEY (C_BELONG, C_NAME));
--BRANCH外键
ALTER TABLE T_PSN_SPEC ADD (CONSTRAINT FK_PSN_SPEC FOREIGN KEY (C_BELONG) REFERENCES T_BRANCH (C_BRANCHID));
--按BRANCH索引
CREATE INDEX IDX_PSN_SPEC ON T_PSN_SPEC (C_BELONG) LOGGING NOPARALLEL;
--唯一索引
CREATE UNIQUE INDEX IDX_PSN_SPEC_NO ON T_PSN_SPEC (C_BELONG, C_NO) LOGGING NOPARALLEL;

--T_PSN_TYPE
EXEC SP_DROPTABLE('T_PSN_TYPE');
CREATE TABLE T_PSN_TYPE
(
  C_BELONG  NUMBER(18)          NOT NULL,
  C_NAME    VARCHAR2(10 BYTE)   NOT NULL,
  C_NO      NUMBER(18,2)        DEFAULT 0 NOT NULL,
  C_ACTIVE  NUMBER(1)           DEFAULT 1 NOT NULL
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_PSN_TYPE ADD (CONSTRAINT PK_PSN_TYPE PRIMARY KEY (C_BELONG, C_NAME));
--BRANCH外键
ALTER TABLE T_PSN_TYPE ADD (CONSTRAINT FK_PSN_TYPE FOREIGN KEY (C_BELONG) REFERENCES T_BRANCH (C_BRANCHID));
--按BRANCH索引
CREATE INDEX IDX_PSN_TYPE ON T_PSN_TYPE (C_BELONG) LOGGING NOPARALLEL;
--唯一索引
CREATE UNIQUE INDEX IDX_PSN_TYPE_NO ON T_PSN_TYPE (C_BELONG, C_NO) LOGGING NOPARALLEL;

--------------------------------------------------------------------------------
--T_EVENT_LOG
--日志表主表
EXEC SP_DROPTABLE('T_HR_LOG');
EXEC SP_DROPTABLE('T_LOG');
EXEC SP_DROPTABLE('T_EVENT_LOG');
CREATE TABLE T_EVENT_LOG
(
  C_ID         NUMBER(18)                       NOT NULL,
  C_BELONG     NUMBER(18),
  C_PERSON     NUMBER(18),
  C_TYPE       VARCHAR2(12 BYTE),
  C_TABLE      VARCHAR2(30 BYTE),
  C_KEY        VARCHAR2(255 BYTE),
  C_LEVEL      VARCHAR2(10 BYTE),
  C_CLASS      VARCHAR2(255 BYTE),
  C_MESSAGE    VARCHAR2(800 BYTE),
  C_FILE       VARCHAR2(255 BYTE),
  C_LINENUM    VARCHAR2(10 BYTE),
  C_LOGGER     VARCHAR2(255 BYTE),
  C_METHOD     VARCHAR2(255 BYTE),
  C_THREAD     VARCHAR2(255 BYTE),
  C_LOGDATE    DATE,
  C_STARTDATE  DATE
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_EVENT_LOG ADD (CONSTRAINT PK_EVENT_LOG PRIMARY KEY (C_ID));
--人员外键
ALTER TABLE T_EVENT_LOG ADD (CONSTRAINT FK_EVENT_LOG FOREIGN KEY (C_BELONG, C_PERSON) REFERENCES T_PERSONAL (C_BELONG,C_PERSONALID));
--序列
EXEC SP_DROPSEQ('SEQ_HR_LOG');
EXEC SP_DROPSEQ('SEQ_LOG');
EXEC SP_DROPSEQ('SEQ_EVENT_LOG');
CREATE SEQUENCE SEQ_EVENT_LOG START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE NOCACHE NOORDER;

--自插入序列ID触发器
EXEC SP_DROPTRG('TRG_HR_LOGID');
EXEC SP_DROPTRG('TRG_LOGID');
CREATE OR REPLACE TRIGGER PEADMIN.TRG_EVENT_LOGID
BEFORE INSERT ON T_EVENT_LOG
FOR EACH ROW
DECLARE NEXT_ID NUMBER;
BEGIN
  SELECT SEQ_EVENT_LOG.NEXTVAL INTO NEXT_ID FROM T_SEQFRO;
  :NEW.C_ID := NEXT_ID;
END;
/

--T_EVENT_LOGD
--日志表明细表
EXEC SP_DROPTABLE('T_EVENT_LOGD');
CREATE TABLE T_EVENT_LOGD
(
  C_ID      NUMBER(22,18),
  C_LOGID   NUMBER(22,18)                       NOT NULL,
  C_STRREP  VARCHAR2(800 BYTE)                  NOT NULL
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--关键字
ALTER TABLE T_EVENT_LOGD ADD (CONSTRAINT PK_EVENT_LOGD PRIMARY KEY (C_ID);
--日志表外键
ALTER TABLE T_EVENT_LOGD ADD (CONSTRAINT FK_EVENT_LOGD FOREIGN KEY (C_LOGID) REFERENCES T_EVENT_LOG (C_ID));
--序列
EXEC SP_DROPSEQ('SEQ_EVENT_LOGD');
CREATE SEQUENCE SEQ_EVENT_LOGD START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE NOCACHE NOORDER;

--自插入序列ID触发器
CREATE OR REPLACE TRIGGER PEADMIN.TRG_EVENT_LOGDID
BEFORE INSERT ON T_EVENT_LOGD
FOR EACH ROW
DECLARE NEXT_ID NUMBER;
BEGIN
  SELECT SEQ_EVENT_LOGD.NEXTVAL INTO NEXT_ID FROM T_SEQFRO;
  :NEW.C_ID := NEXT_ID;
END;
/

--------------------------------------------------------------------------------
--老版本可能有2个字段需要删除
ALTER TABLE T_PERSONAL DROP COLUMN C_NATIVE;
ALTER TABLE T_PERSONAL DROP COLUMN C_BANKCARD;

--老版本需要新加5个字段
ALTER TABLE T_PERSONAL ADD (C_UPGRADE_REASON  VARCHAR2(128));
ALTER TABLE T_PERSONAL ADD (C_ALLOTREASON  VARCHAR2(128));
ALTER TABLE T_PERSONAL ADD (C_RETIREDATE  DATE);
ALTER TABLE T_PERSONAL ADD (C_CONTRACTREASON  VARCHAR2(128));
ALTER TABLE T_PERSONAL ADD (C_LASTMODIFIER  NUMBER(18));

--考勤组成员定义
ALTER TABLE T_PERSONAL DROP CONSTRAINT FK_PERSONAL_HRCHKGROUP;
ALTER TABLE T_PERSONAL DROP (C_HRCHKGROUPID);
ALTER TABLE T_PERSONAL ADD (C_HRCHKGROUPID NUMBER(18));
--考勤组外键
ALTER TABLE T_PERSONAL ADD (CONSTRAINT FK_PERSONAL_HRCHKGROUP FOREIGN KEY (C_BELONG, C_HRCHKGROUPID) REFERENCES T_HRCHK_GROUP (C_BELONG,C_ID));

--插入新纪录ID自动取Sequence
CREATE OR REPLACE TRIGGER TRG_PERSONALID
BEFORE INSERT ON T_PERSONAL
FOR EACH ROW
DECLARE NEXT_ID NUMBER;
BEGIN
	SELECT SEQ_PERSONAL.NEXTVAL INTO NEXT_ID FROM T_SEQFRO;
	:NEW.C_PERSONALID := NEXT_ID;
END;
/

--202:C_WORKTYPE VARCHAR(10)改为VARCHAR(20)
ALTER TABLE T_PERSONAL MODIFY (C_WORKTYPE VARCHAR(20));
--202:增加职务枚举表
CREATE TABLE T_PSN_WORKTYPE
(
  C_BELONG  NUMBER(18)                              NOT NULL,
  C_NAME    VARCHAR2(20 BYTE)                       NOT NULL,
  C_NO      NUMBER(18,2)                        DEFAULT 0                         NOT NULL,
  C_ACTIVE  NUMBER(1)                           DEFAULT 1                         NOT NULL,
  CONSTRAINT PK_PSN_WORKTYPE PRIMARY KEY (C_BELONG, C_NAME),
  CONSTRAINT FK_PSN_WORKTYPE FOREIGN KEY (C_BELONG) REFERENCES T_BRANCH
) LOGGING NOCACHE NOPARALLEL NOMONITORING;
--初始化数据
INSERT INTO T_PSN_WORKTYPE (C_BELONG, C_NAME) (SELECT DISTINCT C_BELONG,C_WORKTYPE FROM T_PERSONAL WHERE NOT C_WORKTYPE IS NULL);
COMMIT;
--启用外键
ALTER TABLE PEADMIN.T_PERSONAL ADD (CONSTRAINT FK_PERSONAL_WORKTYPE FOREIGN KEY (C_BELONG,C_WORKTYPE) REFERENCES PEADMIN.T_PSN_WORKTYPE (C_BELONG,C_NAME));
--202修改人员变动历史表
CREATE TABLE T_PSN_STATUS_BAK(
  C_BELONG           NUMBER(18) NOT NULL,
  C_STATUSID         NUMBER(18) NOT NULL,
  C_STATUSPSN        NUMBER(18) NOT NULL,       /*人员id*/
  C_ONDATE           DATE       NOT NULL,       /*起始日期*/
  C_UPGRADE_REASON   VARCHAR2(128 BYTE),        /*变更文号*/
  C_TYPE             VARCHAR(10)  NOT NULL,     /*用工类别*/
  C_POSITION         VARCHAR(1),                /*岗位：1，驾驶员 2，乘务员 3，调度员 4，管理人员 5，维修工 6，其他人员*/
  C_WORKTYPE         VARCHAR(20),               /*职位*/
  C_REGBELONG        VARCHAR(20),               /*st所属公司（浦强、工交、旅汽）*/ 
  C_PARTY            VARCHAR(12),               /*政治面貌*/
  C_GRADE            VARCHAR(40),               /*职称-资深*/
  C_SCHOOLHISTORY    VARCHAR(60),               /*学历*/
  C_DOWNDATE         DATE        NOT NULL,      /*终止日期*/
  C_DOPSN            NUMBER(18)
);
SELECT COUNT(*) FROM T_PSN_STATUS;
INSERT INTO T_PSN_STATUS_BAK
(SELECT C_BELONG,
  C_STATUSID,
  C_STATUSPSN,
  C_ONDATE,
  C_UPGRADE_REASON,
  C_TYPE,
  C_POSITION,
  (SELECT C_WORKTYPE 
   FROM T_PERSONAL 
   WHERE C_BELONG = T_PSN_STATUS.C_BELONG 
   AND C_PERSONALID = T_PSN_STATUS.C_STATUSPSN),
  C_REGBELONG,
  C_PARTY,
  C_GRADE,
  C_SCHOOLHISTORY,
  C_DOWNDATE,
  C_DOPSN
  FROM T_PSN_STATUS
);
COMMIT;
SELECT COUNT(*) FROM T_PSN_STATUS_BAK;
--确认备份数据条数重建职位表
DROP TABLE T_PSN_STATUS;
CREATE TABLE T_PSN_STATUS(
  C_BELONG           NUMBER(18) NOT NULL,
  C_STATUSID         NUMBER(18) NOT NULL,
  C_STATUSPSN        NUMBER(18) NOT NULL,       /*人员id*/
  C_ONDATE           DATE       NOT NULL,       /*起始日期*/
  C_UPGRADE_REASON   VARCHAR2(128 BYTE),        /*变更文号*/
  C_TYPE             VARCHAR(10)  NOT NULL,     /*用工类别*/
  C_POSITION         VARCHAR(1),                /*岗位：1，驾驶员 2，乘务员 3，调度员 4，管理人员 5，维修工 6，其他人员*/
  C_WORKTYPE         VARCHAR(20),               /*职位*/
  C_REGBELONG        VARCHAR(20),               /*st所属公司（浦强、工交、旅汽）*/ 
  C_PARTY            VARCHAR(12),               /*政治面貌*/
  C_GRADE            VARCHAR(40),               /*职称-资深*/
  C_SCHOOLHISTORY    VARCHAR(60),               /*学历*/
  C_DOWNDATE         DATE        NOT NULL,      /*终止日期*/
  C_DOPSN            NUMBER(18),                /*变更经办人*/
  CONSTRAINT PK_PSNSTA PRIMARY KEY (C_BELONG, C_STATUSID),
  CONSTRAINT FK_PSNSTA_PSN FOREIGN KEY (C_BELONG,C_STATUSPSN) REFERENCES T_PERSONAL,
  CONSTRAINT FK_PSNSTA_DOPSN FOREIGN KEY (C_BELONG,C_DOPSN) REFERENCES T_PERSONAL
);
INSERT INTO T_PSN_STATUS (SELECT * FROM T_PSN_STATUS_BAK);
COMMIT;
SELECT COUNT(*) FROM T_PSN_STATUS;
--确认数据条数后删除备份表
DROP TABLE T_PSN_STATUS_BAK;
--
CREATE OR REPLACE TRIGGER TRG_PSN_STATUSID
BEFORE INSERT ON T_PSN_STATUS
FOR EACH ROW
DECLARE NXT_ID NUMBER;
BEGIN
 SELECT SEQ_PSNSTA.NEXTVAL INTO NXT_ID
 FROM T_SEQFRO;
 :NEW.C_STATUSID := NXT_ID;
END;
/
--人员状态索引
CREATE UNIQUE INDEX IDX_PSNSTA ON T_PSN_STATUS (C_BELONG, C_STATUSPSN, C_ONDATE);

--版本发展
--202增加人员职务历史
--180bug人员注销触发修改downdate,不是ondate
--169bug修改岗位没有触发记录
--166增加T_PERSONAL的删除触发器
--166分离T_PERSONAL的插入和修改触发器
--166增加TRG_AF_PERSONAL_INS、TRG_BF_PERSONAL_DEL、TRG_BF_PERSONAL_UPD、TRG_AF_PERSONAL_UPD
--166从crt0050201_personal_162.sql中拆分TRG_PERSONALID重建
--166从crt0050203_psnonline_162.sql中拆分TRG_PERSONALONLINE,TRG_PERSONALSTATUS废弃
--166从sp_tkt_balance_130.sql中拆分TRG_PERSONAL_CHANGE废弃
---------------------------------------------------
--包含：
--T_PERSONAL的插入前触发器TRG_PERSONALID
--T_PERSONAL的插入后触发器TRG_AF_PERSONAL_INS
--T_PERSONAL的删除前触发器TRG_BF_PERSONAL_DEL
--T_PERSONAL的修改前触发器TRG_BF_PERSONAL_UPD
--T_PERSONAL的修改后触发器TRG_AF_PERSONAL_UPD
----------------------------------------------------
--触发器产生人员表内部ID
--SYS修改前过渡版本，自动产生变动时间
CREATE OR REPLACE TRIGGER TRG_PERSONALID
BEFORE INSERT ON T_PERSONAL
FOR EACH ROW
DECLARE 
NXT_ID NUMBER;
CHGDATE DATE;
BEGIN
 --166
 SELECT SEQ_PERSONAL.NEXTVAL INTO NXT_ID
 FROM T_SEQFRO;
 :NEW.C_PERSONALID := NXT_ID;
 --SYS修改前过渡版本，自动产生变动时间
 --166:自动产生变动时间缺省等于ondate
 :NEW.C_UPGRADE_DATE := :NEW.C_PERSONALONDATE;
 :NEW.C_ALLOTDATE := :NEW.C_PERSONALONDATE;
 IF :NEW.C_PERSONALDOWNDATE <= :NEW.C_PERSONALONDATE THEN
   RAISE_APPLICATION_ERROR(-20003, '工号 '||:NEW.C_WORKERID||'：注销日期必须大于注册日期！');
 END IF;  
END;
/
--插入后触发器自动产生调动记录
CREATE OR REPLACE TRIGGER TRG_AF_PERSONAL_INS
  AFTER INSERT ON T_PERSONAL FOR EACH ROW
BEGIN
--202
--1.插入初始业务调动记录
  INSERT INTO T_PSN_ONLINE (
  C_BELONG,
  C_ONLINEPSN ,
  C_ONDATE ,
  C_ALLOTREASON,
  C_DEPART ,
  C_OFFICE ,
  C_LINEID,
  C_BUSID,
  C_CERT2_NO,
  C_CERT2_NO_HEX,
  C_DOWNDATE,
  C_DOPSN
  )
  VALUES
    (:NEW.C_BELONG,
     :NEW.C_PERSONALID,
     :NEW.C_PERSONALONDATE,
     :NEW.C_ALLOTREASON,
     :NEW.C_DEPART, 
     :NEW.C_OFFICE, 
     :NEW.C_LINEID, 
     :NEW.C_BUSID,
     :NEW.C_CERT2_NO,
     :NEW.C_CERT2_NO_HEX,
		 DECODE(:NEW.C_PERSONALDOWNDATE, TO_DATE('9999/12/31','YYYY/MM/DD'), TO_DATE('9999/12/31','YYYY/MM/DD'), :NEW.C_PERSONALDOWNDATE -1),
		 :NEW.C_LASTMODIFIER);
--2.插入初始状态变动记录
  INSERT INTO T_PSN_STATUS (
  C_BELONG,
  C_STATUSPSN,
  C_ONDATE,
  C_UPGRADE_REASON,
  C_TYPE,
  C_POSITION,
  C_WORKTYPE,
  C_REGBELONG,
  C_PARTY,
  C_GRADE,
  C_SCHOOLHISTORY,
  C_DOWNDATE,
  C_DOPSN
  )
  VALUES
    (:NEW.C_BELONG,
    :NEW.C_PERSONALID,
    :NEW.C_PERSONALONDATE,
    :NEW.C_UPGRADE_REASON, 
    :NEW.C_TYPE, 
    :NEW.C_POSITION,
    :NEW.C_WORKTYPE, 
    :NEW.C_REGBELONG, 
    :NEW.C_PARTY, 
    :NEW.C_GRADE, 
    :NEW.C_SCHOOLHISTORY,
		 DECODE(:NEW.C_PERSONALDOWNDATE, TO_DATE('9999/12/31','YYYY/MM/DD'), TO_DATE('9999/12/31','YYYY/MM/DD'), :NEW.C_PERSONALDOWNDATE -1),
		:NEW.C_LASTMODIFIER);     
END;
/
--增加删除前触发器自动删除初次调动记录
CREATE OR REPLACE TRIGGER TRG_BF_PERSONAL_DEL
  BEFORE DELETE ON T_PERSONAL FOR EACH ROW
BEGIN
 IF :OLD.C_UPGRADE_DATE <> :OLD.C_PERSONALONDATE OR :OLD.C_ALLOTDATE <> :OLD.C_PERSONALONDATE THEN
   RAISE_APPLICATION_ERROR(-20003, '工号 '||:OLD.C_WORKERID||'：最后调动日期或状态变动日期和人员的注册日期不一致，人员不能删除。（处理异常数据或修改调动日期后删除）');
 END IF;
--1.删除初始业务调动记录
 DELETE  FROM T_PSN_ONLINE
 WHERE C_BELONG = :OLD.C_BELONG
 AND   C_ONLINEPSN = :OLD.C_PERSONALID;
--2.删除初始状态变动记录
 DELETE  FROM T_PSN_STATUS
 WHERE C_BELONG = :OLD.C_BELONG
 AND   C_STATUSPSN = :OLD.C_PERSONALID;
END;
/
--修改前触发器验证日期合法
CREATE OR REPLACE TRIGGER TRG_BF_PERSONAL_UPD
  BEFORE UPDATE OF C_PERSONALONDATE,C_PERSONALDOWNDATE,C_UPGRADE_DATE,C_ALLOTDATE
  ON T_PERSONAL  FOR EACH ROW    
BEGIN
  --修改注册日期
  IF :OLD.C_PERSONALONDATE <> :NEW.C_PERSONALONDATE THEN
     --人员已有业务调动或状态变动不能修改注册日期
     IF :OLD.C_UPGRADE_DATE <> :OLD.C_PERSONALONDATE OR :OLD.C_ALLOTDATE <> :OLD.C_PERSONALONDATE THEN
        RAISE_APPLICATION_ERROR(-20003, '工号 '||:OLD.C_WORKERID||'：原调动日期或状态变动日期和人员的原注册日期不一致，人员已有业务调动或状态变动不能修改注册日期。');
     END IF;
     --修改后初次调动日期和变动日期必须等于注册日期
     :NEW.C_UPGRADE_DATE := :NEW.C_PERSONALONDATE;
     :NEW.C_ALLOTDATE := :NEW.C_PERSONALONDATE;
  END IF;
  IF :NEW.C_PERSONALDOWNDATE <= :NEW.C_PERSONALONDATE THEN
     RAISE_APPLICATION_ERROR(-20003, '工号 '||:OLD.C_WORKERID||'：注销日期必须大于注册日期！');
  END IF;
  IF :NEW.C_ALLOTDATE < :NEW.C_PERSONALONDATE OR :NEW.C_ALLOTDATE >= :NEW.C_PERSONALDOWNDATE THEN
     RAISE_APPLICATION_ERROR(-20003, '工号 '||:OLD.C_WORKERID||'：最后的调动日期必须大于等于注册日期、小于注销日期！');
  END IF;
  IF :NEW.C_UPGRADE_DATE < :NEW.C_PERSONALONDATE OR :NEW.C_UPGRADE_DATE >= :NEW.C_PERSONALDOWNDATE THEN
     RAISE_APPLICATION_ERROR(-20003, '工号 '||:OLD.C_WORKERID||'：最后的变动日期必须大于等于注册日期、小于注销日期！');
  END IF;
END;
/
--202增加人员职务历史
--180bug人员注销触发修改downdate,不是ondate
--169bug修改岗位没有触发记录
--修改后触发器自动产生调动记录
CREATE OR REPLACE TRIGGER TRG_AF_PERSONAL_UPD
  AFTER UPDATE OF C_PERSONALONDATE,C_PERSONALDOWNDATE,
                  C_UPGRADE_DATE, C_UPGRADE_REASON, C_TYPE, C_POSITION, C_WORKTYPE, C_REGBELONG, C_PARTY, C_GRADE, C_SCHOOLHISTORY,
                  C_ALLOTDATE, C_ALLOTREASON, C_DEPART, C_OFFICE, C_LINEID, C_BUSID,C_CERT2_NO,C_CERT2_NO_HEX
  ON T_PERSONAL  FOR EACH ROW  
WHEN (
        OLD.C_PERSONALONDATE <> NEW.C_PERSONALONDATE OR
        OLD.C_PERSONALDOWNDATE <> NEW.C_PERSONALDOWNDATE OR
        OLD.C_UPGRADE_DATE <> NEW.C_UPGRADE_DATE OR
        NVL(OLD.C_UPGRADE_REASON,'-') <> NVL(NEW.C_UPGRADE_REASON,'-') OR
        OLD.C_TYPE <> NEW.C_TYPE OR
        OLD.C_POSITION <> NEW.C_POSITION OR
        OLD.C_WORKTYPE <> NEW.C_WORKTYPE OR
        NVL(OLD.C_REGBELONG,'-') <> NVL(NEW.C_REGBELONG,'-') OR
        NVL(OLD.C_PARTY,'-') <> NVL(NEW.C_PARTY,'-') OR
        NVL(OLD.C_GRADE,'-') <> NVL(NEW.C_GRADE,'-') OR
        NVL(OLD.C_SCHOOLHISTORY,'-') <> NVL(NEW.C_SCHOOLHISTORY,'-') OR
        OLD.C_ALLOTDATE <> NEW.C_ALLOTDATE OR
        NVL(OLD.C_ALLOTREASON,'-') <> NVL(NEW.C_ALLOTREASON,'-') OR
        OLD.C_DEPART <> NEW.C_DEPART OR
        NVL(OLD.C_OFFICE,'-') <> NVL(NEW.C_OFFICE,'-') OR
        NVL(OLD.C_LINEID,0) <> NVL(NEW.C_LINEID,0) OR
        NVL(OLD.C_BUSID,0) <> NVL(NEW.C_BUSID,0) OR
        NVL(OLD.C_CERT2_NO,'-') <> NVL(NEW.C_CERT2_NO,'-') OR
        NVL(OLD.C_CERT2_NO_HEX,'-') <> NVL(NEW.C_CERT2_NO_HEX,'-')
       ) 
DECLARE 
TMP_CNT NUMBER;
BEGIN
  --202
  --169
  --修改注册日期
  IF :OLD.C_PERSONALONDATE <> :NEW.C_PERSONALONDATE THEN
     --1.同步初始业务调动记录
     UPDATE T_PSN_ONLINE
     SET C_ONDATE = :NEW.C_PERSONALONDATE
     WHERE C_BELONG = :OLD.C_BELONG
     AND   C_ONLINEPSN = :OLD.C_PERSONALID
     AND   C_ONDATE = :OLD.C_PERSONALONDATE;
     --2.同步初始状态变动记录
     UPDATE T_PSN_STATUS
     SET C_ONDATE = :NEW.C_PERSONALONDATE
     WHERE C_BELONG = :OLD.C_BELONG
     AND   C_STATUSPSN = :OLD.C_PERSONALID
     AND   C_ONDATE = :OLD.C_PERSONALONDATE;
  END IF;
  --180修改注销日期
  IF :NEW.C_PERSONALDOWNDATE <> :OLD.C_PERSONALDOWNDATE THEN
    IF :OLD.C_PERSONALDOWNDATE = TO_DATE('9999/12/31','YYYY/MM/DD') THEN
       --注销人员
       --注销验证
       SP_CHECK_PSNCHANGE(:OLD.C_BELONG,:OLD.C_PERSONALID,:OLD.C_WORKERID||'-'||:OLD.C_PERSONALNAME,TO_CHAR(:NEW.C_PERSONALDOWNDATE,'YYYY/MM/DD'));
       --变更调动日期
       --1.同步初始业务调动记录
       UPDATE T_PSN_ONLINE
       SET C_DOWNDATE = :NEW.C_PERSONALDOWNDATE - 1
       WHERE C_BELONG = :OLD.C_BELONG
       AND   C_ONLINEPSN = :OLD.C_PERSONALID
       AND   C_DOWNDATE = TO_DATE('9999/12/31','YYYY/MM/DD');
       --2.同步初始状态变动记录
       UPDATE T_PSN_STATUS
       SET C_DOWNDATE = :NEW.C_PERSONALDOWNDATE - 1
       WHERE C_BELONG = :OLD.C_BELONG
       AND   C_STATUSPSN = :OLD.C_PERSONALID
       AND   C_DOWNDATE = TO_DATE('9999/12/31','YYYY/MM/DD');
    ELSIF :NEW.C_PERSONALDOWNDATE = TO_DATE('9999/12/31','YYYY/MM/DD') THEN
       --取消注销
       UPDATE T_PSN_ONLINE
       SET C_DOWNDATE = TO_DATE('9999/12/31','YYYY/MM/DD')
       WHERE C_BELONG = :OLD.C_BELONG
       AND   C_ONLINEPSN = :OLD.C_PERSONALID
       AND   C_DOWNDATE = :OLD.C_PERSONALDOWNDATE - 1;
       --2.同步初始状态变动记录
       UPDATE T_PSN_STATUS
       SET C_DOWNDATE = TO_DATE('9999/12/31','YYYY/MM/DD')
       WHERE C_BELONG = :OLD.C_BELONG
       AND   C_STATUSPSN = :OLD.C_PERSONALID
       AND   C_DOWNDATE = :OLD.C_PERSONALDOWNDATE - 1;
    ELSE
       --变更注销
       UPDATE T_PSN_ONLINE
       SET C_DOWNDATE = :NEW.C_PERSONALDOWNDATE - 1
       WHERE C_BELONG = :OLD.C_BELONG
       AND   C_ONLINEPSN = :OLD.C_PERSONALID
       AND   C_DOWNDATE = :OLD.C_PERSONALDOWNDATE - 1;
       --2.同步初始状态变动记录
       UPDATE T_PSN_STATUS
       SET C_DOWNDATE = :NEW.C_PERSONALDOWNDATE - 1
       WHERE C_BELONG = :OLD.C_BELONG
       AND   C_STATUSPSN = :OLD.C_PERSONALID
       AND   C_DOWNDATE = :OLD.C_PERSONALDOWNDATE - 1;
    END IF;
  END IF;
  IF    :OLD.C_ALLOTDATE <> :NEW.C_ALLOTDATE OR
        NVL(:OLD.C_ALLOTREASON,'-') <> NVL(:NEW.C_ALLOTREASON,'-') OR
        :OLD.C_DEPART <> :NEW.C_DEPART OR
        NVL(:OLD.C_OFFICE,'-') <> NVL(:NEW.C_OFFICE,'-') OR
        NVL(:OLD.C_LINEID,0) <> NVL(:NEW.C_LINEID,0) OR
        NVL(:OLD.C_BUSID,0) <> NVL(:NEW.C_BUSID,0) OR
        NVL(:OLD.C_CERT2_NO,'-') <> NVL(:NEW.C_CERT2_NO,'-') OR
        NVL(:OLD.C_CERT2_NO_HEX,'-') <> NVL(:NEW.C_CERT2_NO_HEX,'-') THEN
     --修改调动信息
     --同步调动记录
      --1.删除新C_ALLOTDATE后有效的记录
     DELETE FROM T_PSN_ONLINE
     WHERE C_BELONG = :NEW.C_BELONG
       AND C_ONLINEPSN = :NEW.C_PERSONALID
       AND C_ONDATE >= :NEW.C_ALLOTDATE;
      --2.修改当前有效时间内的downdate为C_ALLOTDATE - 1
     UPDATE T_PSN_ONLINE SET C_DOWNDATE = (:NEW.C_ALLOTDATE - 1)
     WHERE C_BELONG = :NEW.C_BELONG
       AND C_ONLINEPSN = :NEW.C_PERSONALID
       AND C_ONDATE = (
                        SELECT MAX(C_ONDATE)
                        FROM T_PSN_ONLINE
                        WHERE C_BELONG = :NEW.C_BELONG
                        AND C_ONLINEPSN = :NEW.C_PERSONALID
                        AND C_ONDATE < :NEW.C_ALLOTDATE);
      --3.插入新的状态变动记录
     INSERT INTO T_PSN_ONLINE (
        C_BELONG,
        C_ONLINEPSN ,
        C_ONDATE ,
        C_ALLOTREASON,
        C_DEPART ,
        C_OFFICE ,
        C_LINEID,
        C_BUSID,
        C_CERT2_NO,
        C_CERT2_NO_HEX,
        C_DOWNDATE,
        C_DOPSN
        )
        VALUES
          (:NEW.C_BELONG,
           :NEW.C_PERSONALID,
           :NEW.C_ALLOTDATE,
           :NEW.C_ALLOTREASON,
           :NEW.C_DEPART,
           :NEW.C_OFFICE,
           :NEW.C_LINEID,
           :NEW.C_BUSID,
           :NEW.C_CERT2_NO,
           :NEW.C_CERT2_NO_HEX,
           DECODE(:NEW.C_PERSONALDOWNDATE, TO_DATE('9999/12/31','YYYY/MM/DD'), TO_DATE('9999/12/31','YYYY/MM/DD'), :NEW.C_PERSONALDOWNDATE -1),
           :NEW.C_LASTMODIFIER);
  END IF;
  IF    :OLD.C_UPGRADE_DATE <> :NEW.C_UPGRADE_DATE OR
        NVL(:OLD.C_UPGRADE_REASON,'-') <> NVL(:NEW.C_UPGRADE_REASON,'-') OR
        :OLD.C_TYPE <> :NEW.C_TYPE OR
        :OLD.C_POSITION <> :NEW.C_POSITION OR
        :OLD.C_WORKTYPE <> :NEW.C_WORKTYPE OR
        NVL(:OLD.C_REGBELONG,'-') <> NVL(:NEW.C_REGBELONG,'-') OR
        NVL(:OLD.C_PARTY,'-') <> NVL(:NEW.C_PARTY,'-') OR
        NVL(:OLD.C_GRADE,'-') <> NVL(:NEW.C_GRADE,'-') OR
        NVL(:OLD.C_SCHOOLHISTORY,'-') <> NVL(:NEW.C_SCHOOLHISTORY,'-') THEN
     --修改状态信息
     --同步状态记录
      --1.删除新C_UPGRADE_DATE后有效的记录
     DELETE FROM T_PSN_STATUS
     WHERE C_BELONG = :NEW.C_BELONG
       AND C_STATUSPSN = :NEW.C_PERSONALID
       AND C_ONDATE >= :NEW.C_UPGRADE_DATE;
      --2.修改当前有效时间内的downdate为C_UPGRADE_DATE - 1
     UPDATE T_PSN_STATUS SET C_DOWNDATE = (:NEW.C_UPGRADE_DATE - 1)
     WHERE C_BELONG = :NEW.C_BELONG
       AND C_STATUSPSN = :NEW.C_PERSONALID
       AND C_ONDATE = (
                      SELECT MAX(C_ONDATE)
                      FROM T_PSN_STATUS
                      WHERE C_BELONG = :NEW.C_BELONG
                      AND C_STATUSPSN = :NEW.C_PERSONALID
                      AND C_ONDATE < :NEW.C_UPGRADE_DATE);
      --3.插入新的状态变动记录
      INSERT INTO T_PSN_STATUS (
                C_BELONG,
                C_STATUSPSN,
                C_ONDATE,
                C_UPGRADE_REASON,
                C_TYPE,
                C_POSITION,
		C_WORKTYPE,
                C_REGBELONG,
                C_PARTY,
                C_GRADE,
                C_SCHOOLHISTORY,
                C_DOWNDATE,
                C_DOPSN
      )
      VALUES
        (:NEW.C_BELONG,
        :NEW.C_PERSONALID,
        :NEW.C_UPGRADE_DATE,
        :NEW.C_UPGRADE_REASON,
        :NEW.C_TYPE,
        :NEW.C_POSITION,
        :NEW.C_WORKTYPE,
        :NEW.C_REGBELONG,
        :NEW.C_PARTY,
        :NEW.C_GRADE,
        :NEW.C_SCHOOLHISTORY,
        DECODE(:NEW.C_PERSONALDOWNDATE, TO_DATE('9999/12/31','YYYY/MM/DD'), TO_DATE('9999/12/31','YYYY/MM/DD'), :NEW.C_PERSONALDOWNDATE -1),
        :NEW.C_LASTMODIFIER);
  END IF;
  --票制名称不同表示非通用票制（徐州：通票票制-职员调动不验证票务）
  SELECT COUNT(DISTINCT C_NAME) INTO TMP_CNT
  FROM T_TKT_TYPE
  WHERE C_BELONG = :OLD.C_BELONG;
  IF TMP_CNT > 1 THEN
    --非通用票制(强生：非通票票制-职员调动要验证票务是否结清)
    --未注销人员的当前部门、线路、岗位、车队等发生变动，检查票务合法和系统帐户
    IF :OLD.C_PERSONALDOWNDATE = TO_DATE('9999/12/31','YYYY/MM/DD') AND
       :NEW.C_PERSONALDOWNDATE = TO_DATE('9999/12/31','YYYY/MM/DD') AND
                (
                  :NEW.C_DEPART <> :OLD.C_DEPART OR
                  NVL(:NEW.C_LINEID,0) <> NVL(:OLD.C_LINEID,0) OR
                  NVL(:NEW.C_POSITION,'-') <> NVL(:OLD.C_POSITION,'-') OR
                  NVL(:NEW.C_OFFICE,'-') <> NVL(:OLD.C_OFFICE,'-')
                ) THEN
        --变动验证（专用票制需要）
         SP_CHECK_PSNCHANGE(:OLD.C_BELONG,:OLD.C_PERSONALID,:OLD.C_WORKERID||'-'||:OLD.C_PERSONALNAME,'-');
    END IF;
  END IF;
END;
/

